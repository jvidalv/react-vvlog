const Articles = [
  {
    id: 1,
    language_id: 'es',
    user_id: 1,
    category_id: 1,
    date: '2020-01-02',
    title:
      'El menú movil de Bootstrap no se cierra cuando se combina con React Router, solución con solo Hooks',
    resume:
      'Cuando combinas la librería de bootstrap con react-router te deja de funcionar el cerrado del menú automático al seleccionar una opción, aquí una solución fácil usando Hooks.',
    content:
      '<p>Es 2020 y una de las librer&iacute;as m&aacute;s usadas para gestionar la navegaci&oacute;n de nuestra aplicaci&oacute;n en React &eacute;s <strong>react-router</strong>, combinada con <strong>react-bootstrap</strong>, la popular libreria de HTML, CSS y JavaScript. Ambas juntas nos ofrecen de forma inmediata soluciones s&oacute;lidas para la maquetaci&oacute;n y navegaci&oacute;n, permiti&eacute;ndonos tener en marcha nuestra aplicaci&oacute;n de React en el m&iacute;nimo tiempo posible. Juntas, pero, nos pueden traer alg&uacute;n dolor de cabeza, como la perdida de funcionalidad del men&uacute; de navegaci&oacute;n m&oacute;vil.&nbsp;<h3>Que &eacute;s react-router</h3><p>... <a href="https://reacttraining.com/react-router/web/guides/quick-start">es una colecci&oacute;n de componentes declarativos de navegaci&oacute;n</a>. Al ser React pensado como <strong>csr</strong> (Client side rendering) es decir, renderizado en el cliente, la navegaci&oacute;n no funciona de forma tradicional. Esta librer&iacute;a se encarga de imitar la navegaci&oacute;n en React como si de <strong>ssr</strong> (Server side rendering) se tratara, gestionando urls e historia de navegaci&oacute;n sin ning&uacute;n tipo de carga intermedia.&nbsp;</p><h3>Y react-bootstrap</h3><p>... es la adaptaci&oacute;n de la popular librer&iacute;a <a href="https://getbootstrap.com/">Bootstrap</a> a React y sus componentes, permite crear la ui de form&aacute; r&aacute;pida y predecible, adem&aacute;s de responsiva a la mayor&iacute;a de resoluciones usadas hoy en d&iacute;a.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>El problema de combinar ambos en el men&uacute;</h2><p>Si quieres tener un men&uacute; funcional y responsivo con <strong>Bootstrap</strong> utilizaras su componente de men&uacute; <a href="https://react-bootstrap.github.io/components/navbar/">Navbar</a>&nbsp;y todos sus subcomponentes <strong>Navbar.Collapse</strong>, <strong>Navbar.Dropdown</strong>. Adem&aacute;s de usar el subcomponente del componente <strong>Nav</strong>, llamado <strong>Link</strong>, es con este componente donde reside el problema con react-router.</p><pre class="language-jsx"><code>&lt;Navbar&gt;\r\n  &lt;Navbar.Brand href="#home"&gt;vvlog&lt;/Navbar.Brand&gt;\r\n  &lt;Navbar.Toggle /&gt;\r\n  &lt;Navbar.Collapse id="basic-navbar-nav"&gt;\r\n    &lt;Nav className="mr-auto"&gt;\r\n      &lt;Nav.Link href="#home"&gt;Home&lt;/Nav.Link&gt;\r\n      &lt;NavDropdown title="Dropdown" id="basic-nav-dropdown"&gt;\r\n        &lt;NavDropdown.Item href="#hello"&gt;Action&lt;/NavDropdown.Item&gt;\r\n      &lt;/NavDropdown&gt;\r\n    &lt;/Nav&gt;\r\n  &lt;/Navbar.Collapse&gt;\r\n&lt;/Navbar&gt;</code></pre><p>Para que react-router pueda funcionar correctamente todos los <em>&lt;a/&gt;</em> de nuestra aplicaci&oacute;n deben ser instancias del componente <em>&lt;Link&gt;</em> de <strong>react-router</strong>. Si no utilizamos estos, y usamos un <em>&lt;a/&gt;</em> normal la navegaci&oacute;n ser&aacute; a la vieja usanza y el navegador se refrescara con la nueva direcci&oacute;n solicitada.</p><p>Al sustituir el <em>Nav.Link</em> por el otro <em>Link</em> en el men&uacute; de Bootstrap nos estaremos cargando la funcionalidad responsable de cerrar el men&uacute; al hacer click en una enlace, es decir, <strong>el men&uacute; no se colapsara y continuara abierto al navegar a otra p&aacute;gina</strong>, y nosotros no queremos eso, queremos que se cierre, como si de una p&aacute;gina nueva se tratara.</p><p>Para corregir esta funcionalidad nos ayudaremos de un <em>prop </em>de Navbar llamado <em>expanded </em>y de la potencia de los <strong>Hooks de React con React.useState</strong>:</p><pre class="language-javascript"><code>const [expanded, setExpanded] = React.useState(false);</code></pre><p>Esto nos devuelve el <strong>estado inicializado y la referencia a la funci&oacute;n</strong> que permite modificarlo, lo &uacute;nico que pide <em>useState</em> es el valor inicial que queremos que tenga nuestro estado, en este caso <em>false </em>pues queremos que el men&uacute; <strong>NO</strong> este abierto inicialmente.</p><pre class="language-jsx"><code>&lt;Navbar expanded={expanded}&gt;</code></pre><p>Cada vez que modifiquemos el valor de expanded y lo seteemos a <em>"expanded" </em>con <em>setExpanded("expanded") </em><strong>el componente se rerendizara con el men&uacute; abierto </strong>gr&aacute;cias a la propiedad que hemos seteados antes en el <em>&lt;Navbar&gt;</em>, usaremos esta funci&oacute;n en "dos" sitios:</p><pre class="language-jsx"><code>&lt;Navbar.Toggle onClick={() =&gt; setExpanded(expanded ? false : "expanded")} /&gt;</code></pre><p><em>Navbar.Toggle </em>es el elemento que aparece cuando estamos en las resoluciones m&aacute;s peque&ntilde;as y es el que abre y cierra el men&uacute;. Usamos el <em>prop</em> <em>onClick</em> que se lanza cada vez que hacemos clic y se lo pasamos dentro de una funci&oacute;n flecha.</p><p>Adem&aacute;s modificamos todos nuestros <em>&lt;Link&gt;&nbsp;</em>a&ntilde;adiendoles tambi&eacute;n la misma propiedad que ha <em>Navbar.Toggle</em> pero <strong>sin la posibilidad de abrir nunca el men&uacute;</strong>:</p><pre class="language-jsx"><code>&lt;Link onClick={() =&gt; setExpanded(false)} to="/javascript"&gt; JavaScript &lt;/Link&gt;</code></pre><p>La <em>propiedad</em> o <em>prop&nbsp;</em><strong>to&nbsp;</strong>es el equivalente al href de un <em>&lt;a&gt;.&nbsp;</em></p><p>Con esto ya tendr&iacute;amos nuestro men&uacute; <em>&lt;Navbar&gt;</em> de <strong>react-bootstrap plenamente funcional y combinado con la navegaci&oacute;n de react-router</strong>.</p></p>\n',
    state: 1,
    word_count: 609,
    slug:
      'el-menu-movil-de-bootstrap-no-se-cierra-cuando-se-combina-con-react-router-solucion-con-solo-hooks',
    updated_at: 1578429289,
    created_at: 1577986015,
  },
  {
    id: 2,
    language_id: 'ca',
    user_id: 1,
    category_id: 1,
    date: '2020-01-02',
    title:
      'El menú movil de bootstrap no es tanca quan es combina amb React Router, soluciona-ho amb només hooks',
    resume:
      'Quan combines Bootstrap amb react-router et deixa de funcionar el tancat del menú automàtic en seleccionar un link, aquí una solució fàcil usant Hooks.',
    content:
      '<p>&Eacute;s 2020 i una de les llibreries m&eacute;s usades per a gestionar la navegaci&oacute; de la nostra aplicaci&oacute; en React &eacute;s <strong>react-router</strong>, combinada amb <strong>react-bootstrap</strong>, la popular llibreria d\'HTML, CSS i Javascript. Totes dues juntes ens ofereixen de manera immediata solucions s&ograve;lides per a la maquetaci&oacute; i navegaci&oacute;, permetent-nos tenir en marxa la nostra aplicaci&oacute; de React en el m&iacute;nim temps possible. Juntes, per&ograve;, ens poden portar algun mal de cap, com la perduda de funcionalitat del men&uacute; de navegaci&oacute; m&ograve;bil.<h3>Qu&egrave; &eacute;s react-router</h3><p>... <a href="https://reacttraining.com/react-router/web/guides/quick-start">&eacute;s una col&middot;lecci&oacute; de components declaratius de navegaci&oacute;</a>. En ser React pensat com <strong>csr</strong> (Client side rendering) &eacute;s a dir, renderitzat en el client, la navegaci&oacute; no funciona de manera tradicional. Aquesta llibreria s\'encarrega d\'imitar la navegaci&oacute; en React com si de <strong>ssr</strong> (Server side rendering) es tract&eacute;s, gestionant urls i hist&ograve;ria de navegaci&oacute; sense cap mena de c&agrave;rrega interm&egrave;dia.</p><h3>I react-bootstrap</h3><p>... &eacute;s l\'adaptaci&oacute; de la popular llibreria <a href="https://getbootstrap.com/">Bootstrap</a> a React i els seus components, permet crear la ui de form&aacute; r&agrave;pida i predictible, a m&eacute;s de responsiva a la majoria de resolucions usades avui dia.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>El problema de combinar tots dos en el men&uacute;</h2><p>Si vols tenir un men&uacute; funcional i responsiu amb Bootstrap utilitzaras el seu component de men&uacute; <a href="https://react-bootstrap.github.io/components/navbar/">Navbar</a> i tots els seus subcomponents:<em> Navbar.Collapse</em>, <em>Navbar.Dropdown</em>. A m&eacute;s d\'usar el subcomponente del component <em>Nav</em>, anomenat <em>Link</em>, &eacute;s amb aquest component on resideix el problema amb react-router.</p><pre class="language-jsx"><code>&lt;Navbar&gt;\r\n  &lt;Navbar.Brand href="#home"&gt;vvlog&lt;/Navbar.Brand&gt;\r\n  &lt;Navbar.Toggle /&gt;\r\n  &lt;Navbar.Collapse id="basic-navbar-nav"&gt;\r\n    &lt;Nav className="mr-auto"&gt;\r\n      &lt;Nav.Link href="#home"&gt;Home&lt;/Nav.Link&gt;\r\n      &lt;NavDropdown title="Dropdown" id="basic-nav-dropdown"&gt;\r\n        &lt;NavDropdown.Item href="#hello"&gt;Action&lt;/NavDropdown.Item&gt;\r\n      &lt;/NavDropdown&gt;\r\n    &lt;/Nav&gt;\r\n  &lt;/Navbar.Collapse&gt;\r\n&lt;/Navbar&gt;</code></pre><p>Perqu&egrave; react-router pugui funcionar correctament tots els <em>&lt;a/&gt;</em> de la nostra aplicaci&oacute; han de ser inst&agrave;ncies del component <em>&lt;Link&gt;</em> de <strong>react-router</strong>. &nbsp;Si no utilitzem aquests, i usem un <em>&lt;a/&gt;</em> normal la navegaci&oacute; ser&agrave; a la vella usan&ccedil;a i el navegador es refrescar&aacute; amb la nova direcci&oacute; sol&middot;licitada.</p><p>En substituir el <em>Nav.Link</em> per l\'altre <em>Link</em> en el men&uacute; de Bootstrap ens estarem carregant la funcionalitat responsable de tancar el men&uacute; en fer clic en una enlla&ccedil;, &eacute;s a dir, <strong>el men&uacute; no es col&middot;lapsara i continuara obert en navegar a una altra p&agrave;gina</strong>, i nosaltres no volem aix&ograve;, volem que es tanqui, com si d\'una p&agrave;gina nova es tract&eacute;s.</p><p>Per a corregir aquesta funcionalitat ens ajudarem d\'un<em> prop </em>de Navbar: <em>expanded, i</em> de la pot&egrave;ncia dels <strong>Hooks de React amb React.useState</strong>:</p><pre class="language-javascript"><code>const [expanded, setExpanded] = React.useState(false);</code></pre><p>Aix&ograve; ens retorna <strong>l\'estat inicialitzat i la refer&egrave;ncia a la funci&oacute;</strong> que ens el permet modificar, a canvi l\'&uacute;nica cosa que demana <em>useState&nbsp;</em>&eacute;s el valor inicial que volem que tingui el nostre estat, en aquest cas&nbsp;<em>false&nbsp;</em>perqu&egrave; volem que el men&uacute; <strong>NO</strong> estigui obert inicialment.</p><pre class="language-jsx"><code>&lt;Navbar expanded={expanded}&gt;</code></pre><p>Cada vegada que modifiquem el valor de&nbsp;<em>expanded&nbsp;</em>i el setegem a "expanded" amb <em>setExpanded("expanded")</em> <strong>el component es rerendizara amb el men&uacute; obert</strong> gr&aacute;cias a la propietat que hem setegat abans en el <em>&lt;Navbar&gt;.</em></p><p>Usarem aquesta funci&oacute; en "dos" llocs:</p><pre class="language-jsx"><code>&lt;Navbar.Toggle onClick={() =&gt; setExpanded(expanded ? false : "expanded")} /&gt;</code></pre><p><em>Navbar.Toggle</em> &eacute;s l\'element que apareix quan estem en les resolucions m&eacute;s petites i &eacute;s el que obre i tanca el men&uacute;. Utilitzem el prop <em>onClick</em>&nbsp;que es llan&ccedil;a cada vegada que fem clic i li ho passem dins d\'una funci&oacute; fletxa.</p><p>A m&eacute;s modifiquem tots nostres <em>&lt;Link&gt;</em> afegint tamb&eacute; la mateixa propietat que ha <em>Navbar.Toggle</em>&nbsp;<strong>per&ograve; sense la possibilitat d\'obrir mai el men&uacute;</strong>:</p><pre class="language-jsx"><code>&lt;Link onClick={() =&gt; setExpanded(false)} to="/javascript"&gt; JavaScript &lt;/Link&gt;</code></pre><p>La <em>propietat</em> o&nbsp;<em>prop&nbsp;</em><strong>to</strong>&nbsp;&eacute;s l\'equivalent al&nbsp;href&nbsp;d\'un <em>&lt;a&gt;</em>.</p><p>Amb aix&ograve; ja tindr&iacute;em el nostre men&uacute; <em>&lt;Navbar&gt;</em> de <strong>react-bootstrap plenament funcional i combinat amb la navegaci&oacute; de react-router.</strong></p></p>\n',
    state: 1,
    word_count: 615,
    slug:
      'el-menu-movil-de-bootstrap-no-es-tanca-quan-es-combina-amb-react-router-soluciona-ho-amb-nomes-hooks',
    updated_at: 1578429302,
    created_at: 1577992422,
  },
  {
    id: 9,
    language_id: 'ca',
    user_id: 1,
    category_id: 3,
    date: '2020-01-04',
    title:
      "Fer funcionar setlocale i strftime en l'idioma desitjat en un servidor nou Ubuntu / CentOS",
    resume:
      "Has programat tot el teu projecte en entorn local, i al passar-ho al teu nou flamant servidor les dates se t'escriuen només en anglès, en local funciona. Que ha passat?",
    content:
      '<p>Quan desenvolupes en entorn local, sobretot amb Windows la majoria dels idiomes ja v&eacute;nen instal&middot;lats, passant nom&eacute;s <em>ca</em>, <em>es</em>, o <em>en</em> podem alterar l\'idioma local i for&ccedil;ar el PHP a mostrar-nos les dates en l\'idioma indicat, sense complicacions, fins que arribem a producci&oacute;, el servidor &eacute;s una distribuci&oacute; de Linux i ... sorpresa, facis el que facis surten en angl&egrave;s. On est&agrave; el meu llenguatge?<h3>Tot pivota sobre els idiomes (locale) instal&middot;lats al servidor</h3><p>El primer que farem ser&agrave; comprovar els idiomes instal&middot;lats al servidor, el normal, en un servidor nou de Linux &eacute;s que nom&eacute;s porti instal&middot;lat Angl&egrave;s:</p><pre class="language-bash"><code>$ locale -a</code></pre><p>Aix&ograve; ens mostr&eacute;s un llistat dels idiomes instal&middot;lats, si volem per exemple l\'idioma catal&agrave; d\'Espanya el podem instal&middot;lar amb:</p><pre class="language-bash"><code>$ sudo locale-gen ca_ES.UTF-8</code></pre><p>Si estem treballant amb Ubuntu podem treballar a la seva manera (<em>packages</em>) i instal&middot;lar un paquet d\'aquest idioma que ens portar&agrave; totes les configuracions, regions i encodings del idioma en q&uuml;esti&oacute;:</p><pre class="language-bash"><code>$ sudo apt-get install language-pack-ca</code></pre><p>Un cop haguem llan&ccedil;at qualsevol d\'aquestes comandes actualitzem el locale amb:</p><pre class="language-markup"><code>$ sudo update-locale </code></pre><p>Si tot ha anat correctament quan tornem a llan&ccedil;ar <em>locale -a</em> ens mostrara, els paquets d\'idiomes que hem instal&middot;lat. Pel que fa a servidor nom&eacute;s ens fara falta reiniciar el servei de PHP. En el nostre cas utilitzant la versi&oacute; 7.2 hem de fer:</p><pre class="language-bash"><code>$ sudo systemctl restart php7.2-fpm</code></pre><p>Per acabar, cal fixar-se b&eacute; en el nom exacte del <em>locale</em> i passar-ho igual a l\'PHP. En el cas que ens pertoca seria (Atenci&oacute; que &eacute;s utf8 i no UTF-8):</p><pre class="language-php"><code>setlocale(LC_TIME, \'es_ES.utf8\');</code></pre><p>Amb tot aix&ograve; ja tindr&iacute;em el nostre servidor retornant gener a lloc de January a l\'generar una data a dia d\'avui.</p></p>\n',
    state: 1,
    word_count: 280,
    slug: 'fer-funcionar-setlocale-i-strftime-en-lidioma-desitjat-en-un-servidor-nou-ubuntu-centos',
    updated_at: 1578686088,
    created_at: 1578223228,
  },
  {
    id: 4,
    language_id: 'en',
    user_id: 1,
    category_id: 1,
    date: '2020-01-02',
    title:
      "Bootstrap's mobile menu does not close when combined with React Router, simple fix with just Hooks",
    resume:
      'When you combine Bootstrap with react-router, the automatic closing of the menu stops working when you select an option, here an easy solution using Hooks.',
    content:
      '<p>It\'s 2020 and one of the most used libraries to manage the navigation of our application in React is <strong>react-router</strong>, combined with <strong>react-bootstrap</strong>, the popular library of HTML, CSS and JavaScript. Both together offer us immediately solid solutions for layout and navigation, allowing us to have our React application up and running in the shortest time possible. Together, however, they can bring us some headaches, such as the loss of functionality of the mobile navigation menu.&nbsp;<h3>What is react-router</h3><p>... <a href="https://reacttraining.com/react-router/web/guides/quick-start">is a collection of declarative navigation components</a>. As React is designed as <strong>csr</strong> (Client side rendering), i.e. rendered on the client, navigation does not work in the traditional way. This library is in charge of imitating React navigation as if it were <strong>ssr</strong> (Server side rendering), managing urls and navigation history without any intermediate load.&nbsp;</p><h3>And react-bootstrap</h3><p>... is the adaptation of the popular <a href="https://getbootstrap.com/">Bootstrap</a> library to React and its components, allowing to create the UI in a fast and predictable way, as well as responsive to most resolutions used today.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>The problem of combining both on the menu</h2><p>If you want to have a functional and responsive menu with <strong>Bootstrap</strong> you will use its <a href="https://react-bootstrap.github.io/components/navbar/">Navbar</a> menu component and all its sub-components Navbar.Collapse, Navbar.Dropdown. In addition to using the <em>Nav</em> component\'s sub-component, called <strong><em>Link</em></strong>, it is with this component that the problem with react-router resides.</p><pre class="language-jsx"><code>&lt;Navbar&gt;\r\n  &lt;Navbar.Brand href="#home"&gt;vvlog&lt;/Navbar.Brand&gt;\r\n  &lt;Navbar.Toggle /&gt;\r\n  &lt;Navbar.Collapse id="basic-navbar-nav"&gt;\r\n    &lt;Nav className="mr-auto"&gt;\r\n      &lt;Nav.Link href="#home"&gt;Home&lt;/Nav.Link&gt;\r\n      &lt;NavDropdown title="Dropdown" id="basic-nav-dropdown"&gt;\r\n        &lt;NavDropdown.Item href="#hello"&gt;Action&lt;/NavDropdown.Item&gt;\r\n      &lt;/NavDropdown&gt;\r\n    &lt;/Nav&gt;\r\n  &lt;/Navbar.Collapse&gt;\r\n&lt;/Navbar&gt;</code></pre><p>In order for the react-router to work properly all <em>&lt;a/&gt;</em> of our application must be instances of the <em>&lt;Link&gt;</em> component of <strong>react-router</strong>. If we don\'t use these, and we use a normal <em>&lt;a/&gt;</em> the navigation will be in the old way and the browser will be refreshed with the new requested address.</p><p>By replacing the <em>Nav.Link</em> by the other <em>Link</em> in the Bootstrap menu we will be removing the functionality responsible for closing the menu when clicking on a link, <strong>the&nbsp;menu will not collapse and will remain open when navigating to another page</strong>, and we do not want that, we want it to close, as if it were a new page.</p><p>To correct this functionality we will use a Navbar <em>prop</em> called <em>expanded</em> and the power of React Hooks with <strong>React.useState</strong>:</p><pre class="language-javascript"><code>const [expanded, setExpanded] = React.useState(false);</code></pre><p>This returns the initialised state and the reference to the function that allows us to modify it, the only thing that <em>useState</em> asks for is the initial value that we want for our state, in this case <em>false</em> as we want the menu <strong>NOT</strong> to be open initially.</p><pre class="language-jsx"><code>&lt;Navbar expanded={expanded}&gt;</code></pre><p>Every time we modify the value of expanded and set it to "<em>expanded</em>" with <em>setExpanded("expanded")</em> <strong>the component will be rendered with the menu open</strong> thanks to the property we have set before in the <em>&lt;Navbar&gt;.</em> We will use this function in "two" places:</p><pre class="language-jsx"><code>&lt;Navbar.Toggle onClick={() =&gt; setExpanded(expanded ? false : "expanded")} /&gt;</code></pre><p><em>Navbar.Toggle</em> is the item that appears when we are in the smallest resolutions and is the one that opens and closes the menu. We use the <em>onClick</em> prop that is executed each time we click and pass it within an arrow function.</p><p>In addition we modify all our <em>&lt;Link&gt;</em> adding them also the same property that has <em>Navbar.Toggle</em> but <strong>without the possibility to open the menu.</strong></p><pre class="language-jsx"><code>&lt;Link onClick={() =&gt; setExpanded(false)} to="/javascript"&gt; JavaScript &lt;/Link&gt;</code></pre><p>The <em>property</em> or <em>prop</em> <strong>to</strong> is the equivalent of the href of a <em>&lt;a&gt;</em>.&nbsp;</p><p>With this we would have <strong>our fully functional <em>&lt;Navbar&gt;</em> react-bootstrap menu combined with react-router navigation</strong>.</p></p>\n',
    state: 1,
    word_count: 613,
    slug:
      'bootstraps-mobile-menu-does-not-close-when-combined-with-react-router-simple-fix-with-just-hooks',
    updated_at: 1578429310,
    created_at: 1577993644,
  },
  {
    id: 5,
    language_id: 'es',
    user_id: 1,
    category_id: 5,
    date: '2020-01-03',
    title: 'Tener el menú de herramientas de TinyMCE fijo con solo CSS y sin JavaScript',
    resume:
      'Cuando el contenido dentro del plugin de texto enriquecido empieza a crecer, se vuelve engorroso hacer scroll para arriba cada vez que queremos insertar algún elemento especial.',
    content:
      '<p>La barra de herramientas del plugin no sigue nuestra posici&oacute;n de scroll, y cuando el contenido del widget es extenso nos fuerza a tener que subir hasta arriba para poder ejecutar algunas de sus funciones, perdiendo nuestra posici&oacute;n en el texto. Esto, se vuelve m&aacute;s incomodo a&uacute;n cuando tienes que tener seleccionado trozos del contenido antes de seleccionar dichas funciones. TinyMCE a d&iacute;a de hoy no ofrece ninguna soluci&oacute;n a esta problem&aacute;tica, pero solamente con CSS y la variable experimental <em>sticky </em>de la propiedad <a href="https://developer.mozilla.org/es/docs/Web/CSS/position">position</a> podemos arreglarlo.<h3>Que es TinyMCE</h3><p>... es uno de los editores de texto WYSIWYG (<strong>W</strong>hat <strong>Y</strong>ou <strong>S</strong>ee <strong>I</strong>s <strong>W</strong>hat <strong>Y</strong>ou <strong>G</strong>et) m&aacute;s populares de HTML, al ser basado en JavaScript tiene la ventaja de poder ejectuarse en cuasi cualquier entorno.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>El valor sticky de la propiedad position</h2><p>Cuando aplicas la posici&oacute;n sticky a un elemento este deja de ser est&aacute;tico (<em>static</em>) a seguirnos por la p&aacute;gina a medida que hacemos scroll.</p><p>Un ejemplo de la posici&oacute;n&nbsp;<span class="hiddenSpellError">sticky</span>&nbsp;es el&nbsp;<span class="hiddenSpellError">sidebar</span> lateral de este mismo blog si lo visitas con un dispositivo con una resoluci&oacute;n mayor de 720 pixeles de ancho.</p><blockquote>\r\n<p>T&eacute;cnicamente un elemento posicionado como sticky, es un elemento posicionado como relativo (<em>relative</em>) y en el momento en el que el navegador alcanza su posici&oacute;n se vuelve fijo (<em>fixed</em>), hasta que se alcanza el tama&ntilde;o m&aacute;ximo del contenedor, en ese instante vuelve otra vez a relativo.&nbsp;</p>\r\n</blockquote><p>Pero aplicar esta propiedad a la barra de herramientas de TinyMCE puede no ser tan sencillo como parece, pues no solo es aplicar la propiedad al elemento del DOM.</p><p>Si alguno de los padres de este elemento que queremos hacer sticky tiene overflow seteado como:</p><pre class="language-css"><code>overflow: hidden | auto;</code></pre><p>No funcionara nuestra propiedad. Por ello lo primero ser&aacute; dirigirnos al elemento root del plugin (En esta versi&oacute;n identificado por las clases <em>.tox</em> y .<em>tox-tinymce)</em>, y eliminaremos los posibles overflows del plugin:&nbsp;</p><pre class="language-css"><code>.tox-editor-container, .tox-tinymce{\r\n    overflow: unset !important;\r\n}</code></pre><p>Ahora buscaremos en el DOM el elemento el cual queremos hacer sticky, en nuestra versi&oacute;n se puede identificar con la clase <em>.tox-toolbar</em>:</p><pre class="language-css"><code>.tox-toolbar{\r\n    position: sticky !important;\r\n    top: 0;\r\n    z-index: 999;\r\n}</code></pre><p>Es necesario especificar la posici&oacute;n <strong>top</strong>, sin ella, no tendr&aacute; ning&uacute;n efecto la propiedad en el elemento del DOM. Especificamos <strong>z-index&nbsp;</strong>para asegurarnos que ning&uacute;n elemento del contenido nos lo oculta al tener una posici&oacute;n en el eje Z con m&aacute;s prioridad.</p><p>Es necesario setear la propiedad position como <strong>!important</strong> pues al ser el plugin cargado en el cliente nuestros estilos CSS se aplicaran antes que los suyos propios y por ende "machacando" los nuestros.</p><p>Y ya estar&iacute;a. En la versi&oacute;n actual de TinyMCE con solo modificar estas dos clases de CSS podremos tener un men&uacute; de herramientas sticky totalmente funcional, sin ning&uacute;n tipo de las complicaciones antiguas con JavaScript y jQuery.&nbsp;</p></p>\n',
    state: 1,
    word_count: 458,
    slug: 'tener-el-menu-de-herramientas-de-tinymce-fijo-con-solo-css-y-sin-javascript',
    updated_at: 1579442700,
    created_at: 1578093299,
  },
  {
    id: 6,
    language_id: 'ca',
    user_id: 1,
    category_id: 5,
    date: '2020-01-03',
    title: "Tenir el menú d'eines de TinyMCE fix amb sol CSS i sense JavaScript",
    resume:
      'Quan el contingut dins del plugin de text enriquit comença a créixer, es torna molest fer scroll cap amunt cada vegada que volem inserir algun element especial.',
    content:
      "<p>La barra d'eines de l'extensi&oacute; no segueix la nostra posici&oacute; de scroll, i quan el contingut del plugin &eacute;s extens ens for&ccedil;a a haver de pujar fins a dalt per poder executar algunes de les seves funcions, perdent la nostra posici&oacute; en el text. Aix&ograve;, es torna cada cop m&eacute;s inc&ograve;mode quan has de tenir seleccionat trossos de l'contingut abans de seleccionar aquestes funcions. TinyMCE a dia d'avui no ofereix cap soluci&oacute; a aquesta problem&agrave;tica, per&ograve; nom&eacute;s amb CSS i la variable experimental sticky de la propietat <a href=\"https://developer.mozilla.org/es/docs/Web/CSS/position\">position</a> podem arreglar-ho.<h3>Que &eacute;s TinyMce</h3><p>... &eacute;s un dels editors de text WYSIWYG (<strong>W</strong>hat <strong>Y</strong>ou <strong>S</strong>ee <strong>I</strong>s <strong>W</strong>hat <strong>Y</strong>ou <strong>G</strong>et) m&eacute;s populars de HTML, a l'&eacute;sser basat en JavaScript t&eacute; l'avantatge de poder ejectuarse en quasi qualsevol entorn.</p><h2><a id=\"a0\" style=\"padding-top: 50px; margin-top: -50px;\"></a>El valor sticky de la propietat position</h2><p>Quan apliques la posici&oacute; sticky a un element aquest deixa de ser est&agrave;tic (<em>static</em>) a seguir-nos per la p&agrave;gina a mesura que fem scroll.</p><p>Un exemple de la posici&oacute; sticky &eacute;s el sidebar lateral d'aquest mateix blog si el visites des d'un dispositiu amb una resoluci&oacute; major de 720 p&iacute;xels d'ample.</p><blockquote>\r\n<p>T&egrave;cnicament un element posicionat com sticky, &eacute;s un element posicionat com <strong>relatiu</strong> (<em>relative</em>) i en el moment en qu&egrave; el navegador arriba a la seva posici&oacute; es torna <strong>fix</strong> (<em>fixed</em>), fins que s'arriba a la mida m&agrave;xima de l'contenidor, en aquest instant torna una altra vegada a relatiu.</p>\r\n</blockquote><p>Per&ograve; aplicar aquesta propietat a la barra d'eines de TinyMCE pot es tan senzill com sembla, ja que no nom&eacute;s &eacute;s aplicar la propietat a l'element de DOM.</p><p>Si algun dels pares d'aquest element que volem fer sticky t&eacute; overflow com:</p><pre class=\"language-css\"><code>overflow: hidden | auto;</code></pre><p>No funcionar&agrave;. Per aix&ograve; el primer ser&agrave; dirigir-nos a l'element root del plugin (En aquesta versi&oacute; identificat per les classes <em>.tox </em>i <em>.tox-tinymce</em>), i eliminarem els possibles overflows de tots els elements del DOM fills d'&agrave;quest:</p><pre class=\"language-css\"><code>.tox-editor-container, .tox-tinymce{\r\n    overflow: unset !important;\r\n}</code></pre><p>Seguidament buscarem al DOM l'element el qual volem fer sticky, en la nostra versi&oacute; es pot identificar amb la classe <em>.tox-toolbar</em>:</p><pre class=\"language-css\"><code>.tox-toolbar{\r\n    position: sticky !important;\r\n    top: 0;\r\n    z-index: 999;\r\n}</code></pre><p>Cal especificar la posici&oacute; <strong>top</strong>, sense ella, no tindr&agrave; cap efecte la propietat. Especifiquem tamb&eacute; el z-index per assegurar-nos que cap element de l'contingut ens ho oculta a l'tenir una posici&oacute; en l'eix Z mes prioritaria.</p><p>Cal setejar la propietat position com <strong>!important</strong> doncs a l'&eacute;sser el plugin carregat en el client els nostres estils CSS s'apliquen abans que els seus propis i per tant \"sobreescriu\" els nostres.</p><p>Amb aix&ograve; ja estaria, en la versi&oacute; actual de TinyMCE amb nom&eacute;s modificar aquestes dues classes de CSS podrem tenir un men&uacute; d'eines sticky totalment funcional, sense cap de les complicacions antigues amb JavaScript i jQuery.</p></p>\n",
    state: 1,
    word_count: 450,
    slug: 'tenir-el-menu-deines-de-tinymce-fix-amb-sol-css-i-sense-javascript',
    updated_at: 1579442693,
    created_at: 1578162580,
  },
  {
    id: 7,
    language_id: 'en',
    user_id: 1,
    category_id: 5,
    date: '2020-01-03',
    title: 'Have the TinyMCE toolbar fixed with only CSS and without JavaScript',
    resume:
      'When the content inside the rich text plugin starts to grow, it becomes cumbersome to scroll up every time we want to insert some special element.',
    content:
      '<p>The plugin\'s toolbar doesn\'t follow our scrolling position, and when the widget\'s content is extensive it forces us to climb to the top in order to execute some of its functions, losing our position in the text. This, becomes even more uncomfortable when you have to have selected pieces of the content before selecting those functions. TinyMCE doesn\'t offer any solution to this problem nowadays, but only with CSS and the experimental sticky variable of the property <a href="https://developer.mozilla.org/es/docs/Web/CSS/position">position</a> we can fix it.<h3>What is TinyMCE</h3><p>... is one of the most popular WYSIWYG (<strong>W</strong>hat <strong>Y</strong>ou <strong>S</strong>ee <strong>I</strong>s <strong>W</strong>hat <strong>Y</strong>ou <strong>G</strong>et) text editors for HTML, as it is based on JavaScript it has the advantage of being able to run in almost any environment.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>The sticky value of the property position</h2><p>When you apply the sticky position to an element it stops being <em>static</em> and follows us around the page as we scroll.</p><p>An example of the sticky position is the side sidebar of this same blog if you visit it with a device with a resolution greater than 720 pixels wide.</p><blockquote>\r\n<p>Technically an element positioned as sticky, is an element positioned as relative and when the browser reaches its position it becomes fixed, until the maximum size of the container is reached, at that moment it returns again to relative.&nbsp;</p>\r\n</blockquote><p>But applying this property to the TinyMCE toolbar may not be as easy as it seems, since it is not only applying the property to the DOM element.</p><p>If any of the parents of the element we want to make sticky have overflow set as:</p><pre class="language-css"><code>overflow: hidden | auto;</code></pre><p>Our property won\'t work. So the first thing to do is to go to the plugin\'s root element (in this version identified by the <em>.tox</em> and <em>.tox-tinymce</em> classes), and we\'ll eliminate the possible overflows of the plugin:&nbsp;</p><pre class="language-css"><code>.tox-editor-container, .tox-tinymce{\r\n    overflow: unset !important;\r\n}</code></pre><p>Next we will look in the DOM for the element which we want to make sticky, in our version it can be identified with the class <em>.tox-toolbar</em>:</p><pre class="language-css"><code>.tox-toolbar{\r\n    position: sticky !important;\r\n    top: 0;\r\n    z-index: 999;\r\n}</code></pre><p>It is necessary to specify the <strong>top</strong> position, without it, the sticky position will have no effect on the DOM element. We specify <strong>z-index</strong> to make sure that no element in the content hides it from us by having a position in the Z-axis with higher priority.</p><p>It is necessary to set the property position as <strong>!important</strong> because being the plugin loaded on the client our CSS styles are applied before their own and therefore overwritte ours.</p><p>And that would be it. In the current version of TinyMCE just by modifying these two CSS classes we can have a<strong> fully functional sticky tool menu</strong>, without any of the old complications that came when using JavaScript and jQuery.&nbsp;</p></p>\n',
    state: 1,
    word_count: 462,
    slug: 'have-the-tinymce-toolbar-fixed-with-only-css-and-without-javascript',
    updated_at: 1579442711,
    created_at: 1578163690,
  },
  {
    id: 8,
    language_id: 'es',
    user_id: 1,
    category_id: 3,
    date: '2020-01-04',
    title:
      'Hacer funcionar setlocale y strftime en el idioma deseado en un servidor nuevo corriendo Ubuntu/CentOS',
    resume:
      'Has programado todo tu proyecto en entorno local, y al pasarlo a tu nuevo servidor las fechas se te escriben solo en inglés. ¿Que ha pasado?',
    content:
      '<p>Cuando desarrollas en entorno local, sobre todo sobre Windows la mayor&iacute;a de los idiomas ya vienen instalados por defecto, pasando s&oacute;lo <em>ca</em>, <em>es</em>, o <em>en </em>podemos alterar el idioma local y forzar el PHP a mostrarnos las fechas en el idioma indicado, sin complicaciones, hasta que llegamos a producci&oacute;n, el servidor es una distribuci&oacute;n de Linux y ... sorpresa, hagas lo que hagas salen en ingl&eacute;s. &iquest;Donde est&aacute; mi lenguaje?&nbsp;<h3>Todo pivota sobre los idiomas (locale) instalados en el servidor</h3><p>Lo primero que haremos ser&aacute; comprobar los idiomas instalados en el servidor, lo normal, en un servidor nuevo de Linux es que s&oacute;lo lleve instalado Ingl&eacute;s:</p><pre class="language-bash"><code>$ locale -a</code></pre><p>Esto nos mostrara un listado de los idiomas instalados, si queremos por ejemplo el idioma espa&ntilde;ol de Espa&ntilde;a lo podemos instalar con:</p><pre class="language-bash"><code>$ sudo locale-gen es_ES.UTF-8</code></pre><p>Si estamos trabajando con Ubuntu podemos trabajar a su manera (<em>packages</em>) e instalar un paquete de ese idioma que trae todas las configuraciones, regiones y encodings del idioma en cuesti&oacute;n:&nbsp;</p><pre class="language-bash"><code>$ sudo apt-get install language-pack-es</code></pre><p>Una vez hayamos lanzado cualquiera de estos comandos actualizamos el locale con:</p><pre class="language-markup"><code>$ sudo update-locale </code></pre><p>Si todo ha ido correctamente cuando volvamos a lanzar <em>locale -a</em> nos mostrara los paquetes de idiomas que hemos instalado. En cuanto al servidor solo nos faltara reiniciar el servicio de PHP. En nuestro caso usando la versi&oacute;n 7.2 tenemos que hacer:</p><pre class="language-bash"><code>$ sudo systemctl restart php7.2-fpm</code></pre><p>Para acabar hay que fijarse en el nombre exacto del <em>locale</em> y pas&aacute;rselo igual al PHP, en el caso que nos ata&ntilde;e ser&iacute;a (Atenci&oacute;n que es utf8 y no UTF-8):</p><pre class="language-php"><code>setlocale(LC_TIME, \'es_ES.utf8\');</code></pre><p>Con todo esto ya tendr&iacute;amos nuestro servidor devolviendo enero en lugar de January al generar una fecha a dia de hoy.</p></p>\n',
    state: 1,
    word_count: 288,
    slug:
      'hacer-funcionar-setlocale-y-strftime-en-el-idioma-deseado-en-un-servidor-nuevo-corriendo-ubuntucentos',
    updated_at: 1578511444,
    created_at: 1578165673,
  },
  {
    id: 11,
    language_id: 'es',
    user_id: 1,
    category_id: 2,
    date: '2020-01-09',
    title: 'Cómo publicar un paquete propio en npm',
    resume:
      'Si tienes curiosidad o necesidad por saber cómo publicar un paquete en el gestor de librerías de JavaScript, aquí una guía.',
    content:
      '<p>Si tienes unas funciones muy &uacute;tiles que utilizas en distintos proyectos a la vez y te estas dedicando a copiarlas, sabes que cuando corriges alg&uacute;n problema tienes que acordarte de modificarlo en tooodos los sitios, Npm naci&oacute; para dar soluci&oacute;n a esta coyuntura; subelos, instalalos, usalos desde los distintos proyectos incluyendolos en el <em>composer.json </em>y un simple npm install.<h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>Instalar node.js en nuestro ordenador</h2><p>Para utilizar <strong>npm</strong> es necesario tener instalado <strong>node.js</strong> en nuestro ordenador. Si estamos utilizando Windows 10 podemos bajarnos el ejecutable de:</p><blockquote>\r\n<p><a href="https://nodejs.org/es/">https://nodejs.org/es/</a></p>\r\n</blockquote><p>Una vez finalizada la instalaci&oacute;n y reiniciado nuestro sistema ya tendremos disponible node.js y npm.&nbsp;</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>La consola, la herramienta</h2><p>Antes de iniciar las &uacute;ltimas configuraciones de npm, validamos que tengamos instalado node.js correctamente. Usaremos el siguiente comando en nuestro terminal:</p><pre class="language-bash"><code>$ node -v</code></pre><p>Si la respuesta es correcta, y esta es la versi&oacute;n deseada de node continuaremos con:</p><pre class="language-bash"><code>$ npm -v</code></pre><p>Validando tambi&eacute;n la versi&oacute;n de npm. Para asegurarnos que tenemos la &uacute;ltima versi&oacute;n, podemos actualizarlo con:</p><pre class="language-bash"><code>$ npm install npm@latest -g</code></pre><p>Si todo esto es correcto, podemos proceder con nuestro paquete.&nbsp;</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Crear el directorio e inicializar el package</h2><p>Para crear la carpeta que contendr&aacute; nuestro c&oacute;digo fuente y acceder a ella:</p><pre class="language-bash"><code>$ mkdir best-package-ever\r\n$ cd best-package-ever</code></pre><p>Una vez creada la carpeta y encontr&aacute;ndonos dentro de la misma, <strong>hacemos como si inicializamos un repositorio de git,</strong> pero con npm:</p><pre class="language-bash"><code>$ npm init</code></pre><p>Esto inicia un seguido de cuestiones b&aacute;sicas. Podemos hacer enter en todas ellas, no hay necesidad de estipular nada.&nbsp;</p><p>Al finalizar en nuestro directorio tendremos un fichero llamado <strong>package.json</strong> muy parecido a este:</p><pre class="language-markup"><code>{\r\n  "name": "best-package-ever",\r\n  "version": "1.0.0",\r\n  "description": "",\r\n  "main": "index.js",\r\n  "author": "",\r\n  "license": "ISC"\r\n}</code></pre><p>Podemos editar este fichero para a&ntilde;adir un autor, descripci&oacute;n o el nombre exacto del paquete. Los &uacute;nicos campos requeridos s&oacute;n <em>name</em>, <em>version</em> y <em>main</em>.</p><p>El fichero de packaje.json contiene toda la informaci&oacute;n b&aacute;sica sobre la configuraci&oacute;n necesaria para que nuestro paquete pueda funcionar, adem&aacute;s de los metadatos contiene tambien dependencias de otros paquetes (En caso de tenerlas).</p><h2><a id="a3" style="padding-top: 50px; margin-top: -50px;"></a>El &iacute;ndice</h2><p>Por defecto el punto de entrada a nuestro paquete sera el fichero <strong>index.js </strong>(campo <em>main</em> en packaje.json). Podemos generarlo nosotros mismos con:</p><pre class="language-bash"><code>$ touch index.js</code></pre><p>Y tiene que lucir parecido a esto:</p><pre class="language-javascript"><code>module.exports = function() {\r\n  // Aqu&iacute; es donde llamas a tu c&oacute;digo, ya sea importando los ficheros a este e invocando los aqu&iacute; dentro etc...\r\n  console.log("world hello hello world");\r\n  return;\r\n};</code></pre><p>Adem&aacute;s del fichero index.js es recomendado tener tambi&eacute;n <strong>README&nbsp;</strong>donde explicaremos que hace exactamente nuestro paquete, como se puede instalar y como utilizarlo (Documentaci&oacute;n de las funciones b&aacute;sicas):</p><pre class="language-bash"><code>$ touch README\r\n$ echo "## Best package ever" &gt; README</code></pre><h2><a id="a4" style="padding-top: 50px; margin-top: -50px;"></a>La publicaci&oacute;n</h2><p>Antes de publicar <strong>es necesario saber que npm</strong> requiere de una cuenta para poder continuar, y que adem&aacute;s tenemos que estar logeados con nuestro usuario en el CLI:</p><pre class="language-bash"><code>$ npm publish</code></pre><p>...y bual&aacute;!</p></p>\n',
    state: 1,
    word_count: 465,
    slug: 'como-publicar-un-paquete-propio-en-npm',
    updated_at: 1578909697,
    created_at: 1578597912,
  },
  {
    id: 10,
    language_id: 'en',
    user_id: 1,
    category_id: 3,
    date: '2020-01-04',
    title:
      'Run setlocale and strftime in the desired language on a new server running Ubuntu/CentOS',
    resume:
      'You have programmed all your project in local environment, and when you pass it to your new server the dates are written only in English, in local it worked. What happened?',
    content:
      '<p>When you develop in local environment, especially on Windows most of the languages are already installed by default, passing only <em>ca</em>, <em>es</em>, or <em>en</em> we can alter the local language and force PHP to show us the dates in the indicated language, without complications, until we reach production, the server is a Linux distribution and ... surprise, whatever you do comes out in English. Where is my language?&nbsp;<h3>Everything pivots on the languages (locale) installed on the server</h3><p>The first thing we\'ll do is check the languages installed on the server. Normally, on a new Linux server, only English is installed:</p><pre class="language-bash"><code>$ locale -a</code></pre><p>This will show us a list of the installed languages, if we want for example the Spanish language of Spain we can install it with:</p><pre class="language-bash"><code>$ sudo locale-gen es_ES.UTF-8</code></pre><p>If we are working with Ubuntu we can work their way (<em>packages</em>) and install a package of that language that brings all the configurations, regions and encodings of the language in question:&nbsp;</p><pre class="language-bash"><code>$ sudo apt-get install language-pack-es</code></pre><p>Once we have launched any of these commands we update the locale with:</p><pre class="language-markup"><code>$ sudo update-locale </code></pre><p>If everything went well when we relaunch <em>locale -a</em> it will show us the language packs we have installed. As for the server, we just need to restart the PHP service. In our case using version 7.2 we do like:</p><pre class="language-bash"><code>$ sudo systemctl restart php7.2-fpm</code></pre><p>Finally, you have to pay attention to the exact name of the locale and pass it to the PHP, in the case that it concerns us it would be (Attention that it is utf8 and not UTF-8):</p><pre class="language-php"><code>setlocale(LC_TIME, \'es_ES.utf8\');</code></pre><p>With all this we would already have our server returning enero instead of January when generating a date for today.</p></p>\n',
    state: 1,
    word_count: 293,
    slug: 'run-setlocale-and-strftime-in-the-desired-language-on-a-new-server-running-ubuntucentos',
    updated_at: 1578224005,
    created_at: 1578223777,
  },
  {
    id: 12,
    language_id: 'en',
    user_id: 1,
    category_id: 2,
    date: '2020-01-09',
    title: 'How to publish your own package in npm',
    resume:
      'If you are curious or need to know how to publish a package in the JavaScript library manager, here is a guide.',
    content:
      '<p>If you have some useful functions that are used in different projects at the same time, you know that when you modify them you also have to copy paste the changes. Npm was born to give solution to this situation; upload them, install them, use them from the different projects including them in the composer.json and with a simple npm install.<h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>Install node.js in our computer</h2><p>To use <strong>npm</strong> you need to have <strong>node.js</strong> installed on your computer. Windows 10 executable can be downloaded from:</p><blockquote>\r\n<p><a href="https://nodejs.org/es/">https://nodejs.org/es/</a></p>\r\n</blockquote><p>Once the installation is completed and our system restarted, we will have node.js and npm available.&nbsp;</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>The console, the tool</h2><p>Before starting the last npm configurations, we validate that we have node.js installed correctly. We can use the following command in our terminal to check it:</p><pre class="language-bash"><code>$ node -v</code></pre><p>If the answer is correct, and this is the desired version of node we can continue with:</p><pre class="language-bash"><code>$ npm -v</code></pre><p>Validating also the version of npm. To make sure we also have the latest version:</p><pre class="language-bash"><code>$ npm install npm@latest -g</code></pre><p>If all this is correct, we can proceed with our package.&nbsp;</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Create the directory and initialize the package</h2><p>To create the folder that will contain our source code and access it:</p><pre class="language-bash"><code>$ mkdir best-package-ever\r\n$ cd best-package-ever</code></pre><p>Once the folder is created and we\'re inside it, <strong>we make it look like we\'re initializing a git repository</strong>, but with npm:</p><pre class="language-bash"><code>$ npm init</code></pre><p>This initiates a series of basic questions. We can make pass them all, there is no need to stipulate anything.&nbsp;</p><p>At the end, in our directory we will have a file called <strong>package.json</strong> very similar to this one:</p><pre class="language-markup"><code>{\r\n  "name": "best-package-ever",\r\n  "version": "1.0.0",\r\n  "description": "",\r\n  "main": "index.js",\r\n  "author": "",\r\n  "license": "ISC"\r\n}</code></pre><p>We can edit this file to add an author, description or the exact name of the package. <strong>The only required fields are <em>name</em>, <em>version</em> and <em>main</em>.</strong></p><p>The <strong>package.json</strong> file contains all the basic information about the configuration needed for our package to work, besides the metadata it also contains dependencies of other packages (in case you have them).</p><h2><a id="a3" style="padding-top: 50px; margin-top: -50px;"></a>The index</h2><p>By default the entry point to our package will be the file <strong>index.js</strong> (main field in package.json). We can generate it ourselves with:</p><pre class="language-bash"><code>$ touch index.js</code></pre><p>And it has to look like this:</p><pre class="language-javascript"><code>module.exports = function() {\r\n  // This is where you call your code, either by importing the files into it and invoking the ones in here etc..\r\n  console.log("world hello hello world");\r\n  return;\r\n};</code></pre><p>Besides the file index.js it is recommended to have also <strong>README</strong> where you write what our package does, how it can be installed and how to use it (Documentation of the basic functions):</p><pre class="language-bash"><code>$ touch README\r\n$ echo "## Best package ever" &gt; README</code></pre><h2><a id="a4" style="padding-top: 50px; margin-top: -50px;"></a>Publishing</h2><p>Before publishing we have to take into account that npm requires us to be logged in in the CLI ir order to be able to continue:</p><pre class="language-bash"><code>$ npm publish</code></pre><p>...and buala!</p></p>\n',
    state: 1,
    word_count: 483,
    slug: 'how-to-publish-your-own-package-in-npm',
    updated_at: 1579375269,
    created_at: 1578686982,
  },
  {
    id: 13,
    language_id: 'ca',
    user_id: 1,
    category_id: 2,
    date: '2020-01-09',
    title: 'Com publicar un paquet propi a npm',
    resume:
      'Si tens curiositat o necessitat per saber com publicar un paquet en el gestor de llibreries de JavaScript, aquí una guia.',
    content:
      '<p>Si tens unes funcions molt &uacute;tils que utilitzes en diferents projectes alhora i t\'est&agrave;s dedicant a copiar-les, saps que quan corregeixes algun problema has de recordar-te de modificar-lo en tooooots els llocs, NPM va n&eacute;ixer per donar soluci&oacute; a aquesta conjuntura; puja\'ls, instalals, utilitza\'ls des dels diferents projectes incloent-los en el composer.json i un simple NPM install.<h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>Instal&middot;lar node.js al nostre ordinador</h2><p>Per utilitzar <strong>npm</strong> &eacute;s necessari tenir instal&middot;lat <strong>node.js</strong> al nostre ordinador. Si estem utilitzant Windows 10 podem baixar-nos l\'executable de:</p><blockquote>\r\n<p><a href="https://nodejs.org/es/">https://nodejs.org/es/</a></p>\r\n</blockquote><p>Un cop finalitzada la instal&middot;laci&oacute; i reiniciat el nostre sistema ja tindrem disponible node i npm.</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>La consola, l\'eina</h2><p>Abans d\'iniciar les &uacute;ltimes configuracions de npm, validem que tinguem instal&middot;lat node.js correctament. Farem servir la seg&uuml;ent comanda en el nostre terminal:</p><pre class="language-bash"><code>$ node -v</code></pre><p>Si la resposta &eacute;s correcta, i aquesta &eacute;s la versi&oacute; desitjada de node continuarem amb:</p><pre class="language-bash"><code>$ npm -v</code></pre><p>Validant tamb&eacute; la versi&oacute; de npm. Per assegurar-nos que tenim l\'&uacute;ltima versi&oacute;, podem actualitzar-lo amb:</p><pre class="language-bash"><code>$ npm install npm@latest -g</code></pre><p>Si tot aix&ograve; &eacute;s correcte, podem procedir amb el nostre paquet.</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Crear el directori i inicialitzar el package</h2><p>Per crear la carpeta que contindr&agrave; el nostre codi font i accedir-hi:</p><pre class="language-bash"><code>$ mkdir best-package-ever\r\n$ cd best-package-ever</code></pre><p>Un cop creada la carpeta i trobant-nos dins de la mateixa, <strong>fem com si inicialitzem un repositori de git</strong>, per&ograve; amb NPM:</p><pre class="language-bash"><code>$ npm init</code></pre><p>Aix&ograve; inicia un seguit de q&uuml;estions b&agrave;siques. Podem fer enter en totes elles, no hi ha necessitat d\'estipular res.</p><p>A l\'acabar al nostre directori tindrem un fitxer anomenat <strong>package.json</strong> molt semblant a aquest:</p><pre class="language-markup"><code>{\r\n  "name": "best-package-ever",\r\n  "version": "1.0.0",\r\n  "description": "",\r\n  "main": "index.js",\r\n  "author": "",\r\n  "license": "ISC"\r\n}</code></pre><p>Podem editar aquest fitxer per afegir un autor, descripci&oacute; o el nom exacte de l\'paquet. Els &uacute;nics camps requerits s&oacute;n <em>name</em>, <em>versio</em> i <em>main</em>.</p><p>El fitxer de <strong>packaje.json cont&eacute; tota la informaci&oacute; b&agrave;sica sobre la configuraci&oacute; necess&agrave;ria per a poder funcionar</strong>, a m&eacute;s de les metadades cont&eacute; tamb&eacute; depend&egrave;ncies d\'altres paquets (En cas de tenir-les).</p><h2><a id="a3" style="padding-top: 50px; margin-top: -50px;"></a>L\'&iacute;ndex</h2><p>Per defecte el punt d\'entrada al nostre paquet ser&agrave; el fitxer <strong>index.js</strong> (camp main en packaje.json). Podem generar-nosaltres mateixos amb:</p><pre class="language-bash"><code>$ touch index.js</code></pre><p>I ha de lluir semblant a aix&ograve;:</p><pre class="language-javascript"><code>module.exports = function() {\r\n  // Aqu&iacute; &eacute;s on crides al teu codi, ja sigui important els fitxers a aquest i invocant les aqu&iacute; dins etc ...\r\n  console.log("world hello hello world");\r\n  return;\r\n};</code></pre><p>A m&eacute;s de el fitxer index.js &eacute;s recomanat tenir tamb&eacute; <strong>README</strong> on explicarem que fa exactament el nostre paquet, com es pot instal&middot;lar i com utilitzar-lo (Documentaci&oacute; de les funcions b&agrave;siques):</p><pre class="language-bash"><code>$ touch README\r\n$ echo "## Best package ever" &gt; README</code></pre><h2><a id="a4" style="padding-top: 50px; margin-top: -50px;"></a>La publicaci&oacute;</h2><p>Abans de publicar <strong>cal saber que npm requereix d\'un compte</strong> per poder continuar, i que a m&eacute;s hem d\'estar connectats amb el nostre usuari en el CLI:</p><pre class="language-bash"><code>$ npm publish</code></pre><p>... i bual&aacute;!</p></p>\n',
    state: 1,
    word_count: 459,
    slug: 'com-publicar-un-paquet-propi-a-npm',
    updated_at: 1581630910,
    created_at: 1578687660,
  },
  {
    id: 17,
    language_id: 'en',
    user_id: 1,
    category_id: 1,
    date: '2020-01-16',
    title: 'Make our application multilingual using the power of hooks and React.createContext',
    resume:
      'How to make, with very few lines of code, our own translator to have our application available in more than one language without the need for third party packages.',
    content:
      '<p>Today there are standardized libraries that allow to make multi-language applications easily (such as <a href="https://www.npmjs.com/package/i18n">i18n</a>), but if we have any special need, or simply want to learn how they work in a "basic" way below most of them, implement one in JavaScript, and more specifically using the power of React Hooks is simple.<h3>What I\'m not going to explain to you here</h3><p>It\'s an intermediate tutorial in which I\'m going to omit basic things like: export and import of files and dependencies, implementation in detail of the context or hooks, or how React and JavaScript work.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>The dictionary</h2><p>First things first, we can do magic by programming, but unless we pay for a premium API that translates our strings dynamically, <strong>we have to do the translations of the texts ourselves</strong>.</p><p>To do this we will use a basic structure, an object, which will contain properties (our key to the language), which in turn will contain objects with the keys to the translations, a basic example:</p><pre class="language-javascript"><code>const DICTIONARY = \r\n       ca : {\r\n            hello_world : "Hola m&oacute;n"\r\n       },\r\n       es : {\r\n            hello_world : "Hola mundo"\r\n       },\r\n       en : {\r\n            hello_world : "Hello world"\r\n       }\r\n}\r\n</code></pre><p>Thanks to the flexibility of JavaScript you can do this in many ways, for example, where we put <span style="text-decoration: underline;">hello_world</span> we could modify it by the string <span style="text-decoration: underline;">"Hello world" : "Hello world"</span> directly, so, even not including the translation in this object, when we call the function that picks it up and paints it we would return some meaningful value.&nbsp;</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>Is it a cloud? Is it a plane? No! It\'s the context!</h2><p>Language is indispensable in all the screens that our React application loads, so, by logic, has to be stored, or at least contained, <strong>in a place where all the components have easy access to it</strong>. That is, in a component that precedes them all, usually the highest in terms of hierarchy and the first in our app.&nbsp;</p><p>If we don\'t use Context or Redux, <strong>we will have to pass the language prop through all the components that descend from it</strong>, and not only the language, we will also have to pass the reference to the function that alters it, at least to the component that modifies it.&nbsp;</p><blockquote>\r\n<p>For a problem like this, Redux and later Context were born. These basically act as a global container of "information" (State), and also as a dispenser (Dispatcher); of state, and of functions, that can alter (really mutate) their own state.</p>\r\n</blockquote><p>In this tutorial, we will use React.createContext and two hooks React.useContext and React.useReducer, to create our provider:</p><pre class="language-javascript"><code>import React, {createContext, useContext, useReducer} from "react";\r\n\r\n// We initialize the context functionalities \r\nexport const StateContext = createContext();\r\n\r\n// We return the context as a component of react\r\nexport const StateProvider = ({reducer, initialState, children}) =&gt; (\r\n    &lt;StateContext.Provider value={useReducer(reducer, initialState)}&gt;\r\n        {children}\r\n    &lt;/StateContext.Provider&gt;\r\n);\r\n\r\n/**\r\n*  useGlobals is what we will use to access the context (state, functions)\r\n*  from any component of our application that descends from StateProvider\r\n*/\r\nexport const useGlobals = () =&gt; useContext(StateContext);</code></pre><p><span style="text-decoration: underline;">StateProvider</span> requires three props; reducer, initialState and <span style="text-decoration: underline;">children</span>. The latter is React\'s default props containing the children components.&nbsp;</p><p><span style="text-decoration: underline;">initialState</span>, as its name says, is the initial state, an object that contains the initial values of the state, in our case:</p><pre class="language-javascript"><code>export const initialState = {\r\n   language : \'en\'\r\n}</code></pre><p>Here we can put the language we want (the ones we are going to use, and have declared in our dictionary), I want the application to start in (English) by default.</p><p>The <span style="text-decoration: underline;">reducer</span> has more crumb, but in the end it is still a switch, of all life, glorified:</p><pre class="language-javascript"><code>export const reducer = (state, action) =&gt; {\r\n    switch (action.type) {\r\n        case "changeLanguage":\r\n            return {\r\n                ...state,\r\n                // action.changeLanguage contains the string of the language to which we are going to change\r\n                language: action.changeLanguage,\r\n            };\r\n    }\r\n}</code></pre><p>With all this we have our brand new <strong>context</strong> ready for battle, we just need to use it in the application flow, in my case, I use it as the first component of the virtual DOM:</p><pre class="language-jsx"><code>function App() {\r\n    return (\r\n        &lt;StateProvider initialState={initialState} reducer={reducer}&gt;\r\n            &lt;Index/&gt;\r\n        &lt;/StateProvider&gt;\r\n    );\r\n}\r\n</code></pre><p>Now all the descendant components of Index, Index included, have access to our language, and to its function that modifies it,<strong> without the need to pass it directly as a prop</strong>.</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Modify and access the language</h2><p>All the functionality we need to be able to consult and alter the language of our application is brought to us by hook <strong>useGlobals()</strong>:</p><pre class="language-javascript"><code>const [{language}, dispatch] = useGlobals();</code></pre><p><span style="text-decoration: underline;">Language</span> will contain the current language string, on a first load if everything has worked correctly it will be "<strong>en</strong>". The <span style="text-decoration: underline;">dispatch</span> is in charge (after a few loops inside internal functions) of reaching the switch we have declared before, and execute the function we indicate:</p><pre class="language-javascript"><code>// lang must be the language we are going to assign ("ca", "es" o "en")\r\nconst changeLanguage = lang =&gt; {\r\n     dispatch({\r\n            type: "changeLanguage",\r\n            changeLanguage: lang\r\n      });\r\n};\r\n</code></pre><h2><a id="a3" style="padding-top: 50px; margin-top: -50px;"></a>The hook that translates them all</h2><p>Finally, with all the tools available, let\'s create our translation hook.</p><p>By React\'s standard <strong>all hooks must use camelcase</strong> and <strong>start with use</strong>, so let\'s call our <strong>useT()</strong>. Since it is a function that we will use a lot, the name, the shorter and cleaner the better (personal opinion).</p><pre class="language-javascript"><code>/**\r\n * Translation hook\r\n * @param translation string\r\n * @returns {string|*}\r\n */\r\nfunction useT(translation) {\r\n   const [{language}] = useGlobals();\r\n   // The code that goes here is a little lower\r\n}</code></pre><p>As we can see is very simple, the hook accepts a parameter, translation, is the identifier in the form of a string of which property of the object dictionary to return, in this case would be "hello_world", to return "Hello world".</p><p>The core:</p><pre class="language-javascript"><code>let fs = translation;\r\n\r\n    try {\r\n\r\n        if (!DICTIONARY[language]) {\r\n            console.error(`Missing language -&gt; ${language}`);\r\n            return `@@ ${fs} @@`;\r\n        }\r\n\r\n        if (!DICTIONARY[language][translation]) {\r\n            console.error(`Missing translation -&gt; ${translation} for -&gt; ${language}`);\r\n            return `@@ ${fs} @@`;\r\n        }\r\n\r\n        fs = DICTIONARY[language][translation];\r\n\r\n    } catch (error) {\r\n        fs = \'@@ translation_error @@\'\r\n    }\r\n\r\nreturn fs;</code></pre><p>To begin with, it is necessary to have imported our DICTIONARY object, secondly, we surround all operations in a <strong>try/catch to be sure that we will ALWAYS return a string</strong> and not blow up the application.</p><ol>\r\n<li>In the first IF we validate that the language exists.</li>\r\n<li>In the second one we validate that the translation exists.</li>\r\n</ol><p>If everything is correct we return the language translation, if not, we return a string surrounded by @@ and throw a console error so that the developer/translator can detect that something is wrong there.</p><h2><a id="a4" style="padding-top: 50px; margin-top: -50px;"></a>Using the hook useT() on our components</h2><p>To use our new hook we call it inside one of the components that descend from our <span style="text-decoration: underline;">StateProvider</span>:</p><pre class="language-jsx"><code>const Hello = () =&gt; (\r\n    &lt;div&gt;\r\n       &lt;span&gt;\r\n           { useT("hello_world") }\r\n       &lt;/span&gt;\r\n    &lt;/div&gt;\r\n);</code></pre><p>There is one important thing to keep in mind, the position of the hooks in the virtual DOM must be immutable, so we could not have things like:&nbsp;</p><pre class="language-javascript"><code>{ isAppLoaded() ? &lt;LoadingPlaceholder /&gt; : useT("hello_world") }</code></pre><p>It is an important limitation, but it is very easy to correct and turn it around so you can do what you want.</p><h3>The source code</h3><p>This same hook is the one I use to translate the static content of this blog, if you want to see the real and extended source code, with some extra features and decoupled to work as a hook or without it you can check it out here: <a href="https://github.com/jvidalv/react-vvlog">https://github.com/jvidalv/react-vvlog</a></p></p>\n',
    state: 1,
    word_count: 1205,
    slug: 'make-our-application-multilingual-using-the-power-of-hooks-and-reactcreatecontext',
    updated_at: 1582834218,
    created_at: 1579437050,
  },
  {
    id: 16,
    language_id: 'es',
    user_id: 1,
    category_id: 1,
    date: '2020-01-16',
    title:
      'Hacer nuestra aplicación multilenguaje utilizando la potencia de los hooks y React.createContext',
    resume:
      'Como hacer, con muy pocas líneas de código, nuestro propio traductor para tener nuestra aplicación disponible en más de un idioma sin necesidad de paquetes de terceros.',
    content:
      '<p>Hoy en d&iacute;a existen librer&iacute;as estandarizadas que permiten hacer aplicaciones multiidioma con facilidad ( Como por ejemplo <a href="https://www.npmjs.com/package/i18n">i18n</a>), pero si tenemos alguna necesidad especial, o simplemente queremos aprender como funcionan de forma "b&aacute;sica" por debajo la mayor&iacute;a de ellas, implementar una en JavaScript, y mas concretamente utilizando la potencia de los Hooks de React es sencillo.<h3>Qu&eacute; no voy a explicarte aqu&iacute;</h3><p>Es un tutorial intermedio en el que voy a omitir cosas b&aacute;sicas como: exportaci&oacute;n e importaci&oacute;n de ficheros y dependencias, implementaci&oacute;n en detalle del contexto o hooks, o como funciona o deja de funcionar React y JavaScript.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>El diccionario</h2><p>Lo primero es lo primero, podemos hacer magia programando, pero a no ser que paguemos por una API premium que traduzca nuestros strings de forma din&aacute;mica, tenemos que hacer nosotros las traducciones de los textos.</p><p>Para ello utilizaremos una estructura b&aacute;sica, un objeto, que contendr&aacute; propiedades (nuestra key al idioma), que su vez contendr&aacute;n objetos con las keys a las traducciones, un ejemplo b&aacute;sico:</p><pre class="language-javascript"><code>const DICTIONARY = \r\n       ca : {\r\n            hello_world : "Hola m&oacute;n"\r\n       },\r\n       es : {\r\n            hello_world : "Hola mundo"\r\n       },\r\n       en : {\r\n            hello_world : "Hello world"\r\n       }\r\n}\r\n</code></pre><p>Gracias a la flexibilidad de JavaScript esto puedes hacerlo de muchas formas, por ejemplo, donde ponemos <span style="text-decoration: underline;">hello_world</span> lo podr&iacute;amos modificar por el string <span style="text-decoration: underline;">"Hello world" : "Hello world"</span> directamente, as&iacute;, a&uacute;n no incluyendo la traducci&oacute;n en este objecto, cuando llam&aacute;ramos a la funci&oacute;n que la recoge y la pinta devolver&iacute;amos alg&uacute;n valor con sentido.&nbsp;</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>&iquest;Es una nube? &iquest;Es un avi&oacute;n? &iexcl;No! &iexcl;Es el contexto!</h2><p>Una informaci&oacute;n tan global, e indispensable en todas las pantallas que cargue nuestra aplicaci&oacute;n de React como el idioma, por l&oacute;gica, tiene que estar almacenado, o al menos contenido, en un siti&oacute; donde todos los componentes tengan f&aacute;cil acceso a &eacute;l. Es decir, en un componente que los preceda a todos, normalmente el m&aacute;s alto en cuanto a jerarqu&iacute;a y el primero de nuestra app.&nbsp;</p><p>Si no utilizamos Context o Redux, nos veremos<strong> obligados a pasar el idioma por tooodos los componentes que desciendan de &eacute;l</strong>, y no solo el idioma, tambi&eacute;n deberemos pasar la referencia a la funci&oacute;n que lo altera, al menos al componente que lo modifica.&nbsp;</p><blockquote>\r\n<p><strong>Para una problematica como esta naci&oacute; Redux y posteriormente Context</strong>. Estos basicamente actuan como un contenedor global de "informaci&oacute;n" (Estado), y tambien como un dispensador (Dispatcher); del estado, y de funciones, que pueden alterar (Realmente mutar) su propio estado.</p>\r\n</blockquote><p>En este tutorial, utilizaremos React.createContext y dos hooks React.useContext y React.useReducer, para crear nuestro proveedor:</p><pre class="language-javascript"><code>import React, {createContext, useContext, useReducer} from "react";\r\n\r\n// Inicializamos las funcionalidades del contexto \r\nexport const StateContext = createContext();\r\n\r\n// Devolvemos el contexto como un componente de react\r\nexport const StateProvider = ({reducer, initialState, children}) =&gt; (\r\n    &lt;StateContext.Provider value={useReducer(reducer, initialState)}&gt;\r\n        {children}\r\n    &lt;/StateContext.Provider&gt;\r\n);\r\n\r\n/**\r\n*  useGlobals es lo que usaremos para acceder al contexto (estado, funciones)\r\n*  desde cualquier componente de nuestra aplicaci&oacute;n que descienda de StateProvider\r\n*/\r\nexport const useGlobals = () =&gt; useContext(StateContext);</code></pre><p><span style="text-decoration: underline;">StateProvider</span> requiere de tres props; reducer, initialState y <span style="text-decoration: underline;">children</span>. Este &uacute;ltimo es prop por defecto de React que contiene los componentes hijos.&nbsp;</p><p><span style="text-decoration: underline;">initialState</span>, como bien dice su nombre, es el estado inicial, un objecto que contiene los valores iniciales del estado, en nuestro caso:</p><pre class="language-javascript"><code>export const initialState = {\r\n   language : \'en\'\r\n}</code></pre><p>Aqu&iacute; podemos poner el idioma que nos plaza (de los que vayamos a usar, y tengamos declarado en nuestro diccionario), yo por defecto, quiero que la aplicaci&oacute;n arranque en <em><strong>en</strong> </em>(Ingl&eacute;s).</p><p>El <span style="text-decoration: underline;">reducer</span> tiene m&aacute;s miga, pero al final no deja de ser un switch, de toda la vida, glorificado:</p><pre class="language-javascript"><code>export const reducer = (state, action) =&gt; {\r\n    switch (action.type) {\r\n        case "changeLanguage":\r\n            return {\r\n                ...state,\r\n                // action.changeLanguage contiene el string del idioma al cual vamos a cambiar\r\n                language: action.changeLanguage,\r\n            };\r\n    }\r\n}</code></pre><p>Con todo esto ya tenemos nuestro flamante <strong>contexto</strong> listo para la batalla, solo nos falta utilizarlo en el flujo de la aplicaci&oacute;n, en mi caso, lo utilizo como el primer componente del DOM virtual:</p><pre class="language-jsx"><code>function App() {\r\n    return (\r\n        &lt;StateProvider initialState={initialState} reducer={reducer}&gt;\r\n            &lt;Index/&gt;\r\n        &lt;/StateProvider&gt;\r\n    );\r\n}\r\n</code></pre><p>Ahora todos los componentes descendientes de Index, Index incluido <strong>tienen acceso a nuestro idioma, y a su funci&oacute;n que lo modifica</strong>, sin necesidad de pas&aacute;rselo directamente como un prop.</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Modificar y acceder al idioma</h2><p>Toda la funcionalidad que necesitamos para poder consultar y alterar el idioma de nuestra aplicaci&oacute;n nos lo trae el hook <strong>useGlobals()</strong>:</p><pre class="language-javascript"><code>const [{language}, dispatch] = useGlobals();</code></pre><p><span style="text-decoration: underline;">Language</span> contendra el string del idioma actual, en una primera carga si todo ha funcionado correctamente sera <strong>"en"</strong>. Por su lado el <span style="text-decoration: underline;">dispatch</span> se encarga ( Despues de unas cuantas vueltas por funcionalidades internas ) de llegar al switch que hemos declarado antes, y ejecutar la funci&oacute;n que le indiquemos:</p><pre class="language-javascript"><code>// lang debe ser el idioma el cual vayamos a asignar ("ca", "es" o "en")\r\nconst changeLanguage = lang =&gt; {\r\n     dispatch({\r\n            type: "changeLanguage",\r\n            changeLanguage: lang\r\n      });\r\n};\r\n</code></pre><h2><a id="a3" style="padding-top: 50px; margin-top: -50px;"></a>Lo divertido, el hook que traduce</h2><p>Por fin, con todas las herramientas disponibles, vamos a crear nuestro hook de traducci&oacute;n.</p><p>Por est&aacute;ndar de React <strong>todos los hooks deben utilizar camelcase</strong> y <strong>empezar por use</strong>, as&iacute; que vamos a llamar al nuestro <strong>useT()</strong>. Ya que es una funci&oacute;n que vamos a utilizar mucho, el nombre, cuanto mas corto y limpio mejor (opini&oacute;n personal).</p><pre class="language-javascript"><code>/**\r\n * Translation hook\r\n * @param translation string\r\n * @returns {string|*}\r\n */\r\nfunction useT(translation) {\r\n   const [{language}] = useGlobals();\r\n   // El c&oacute;digo que va aqu&iacute; est&aacute; un poco m&aacute;s abajo\r\n}</code></pre><p>Como podemos ver es muy simple, el hook acepta un parametro, translation, es el identificador en forma de string de cual propiedad del objeto diccionario a devolver, en este caso seria "hello_world", para devolver "Hola mundo".</p><p>El core de la funci&oacute;n:</p><pre class="language-javascript"><code>let fs = translation;\r\n\r\n    try {\r\n\r\n        if (!DICTIONARY[language]) {\r\n            console.error(`Missing language -&gt; ${language}`);\r\n            return `@@ ${fs} @@`;\r\n        }\r\n\r\n        if (!DICTIONARY[language][translation]) {\r\n            console.error(`Missing translation -&gt; ${translation} for -&gt; ${language}`);\r\n            return `@@ ${fs} @@`;\r\n        }\r\n\r\n        fs = DICTIONARY[language][translation];\r\n\r\n    } catch (error) {\r\n        fs = \'@@ translation_error @@\'\r\n    }\r\n\r\nreturn fs;</code></pre><p>Para empezar, es necesario haber importado nuestro objecto <span style="text-decoration: underline;">DICTIONARY</span>, segundo, rodeamos todas las operaciones en un <strong>try/catch para asi tener la seguridad que SIEMPRE devolveremos un string</strong> y no haremos explotar la aplicaci&oacute;n por los aires.</p><ol>\r\n<li>En el primer IF validamos que exista el lenguaje.</li>\r\n<li>En el segundo validamos que exista la traducci&oacute;n.</li>\r\n</ol><p>S&iacute; todo es correcto devolvemos la traducci&oacute;n del idioma, si no, devolvemos un string rodeado de @@ y lanzamos un error por consola para que el desarrollador/traductor pueda detectar que ah&iacute; falla algo.</p><h2><a id="a4" style="padding-top: 50px; margin-top: -50px;"></a>Utilizar el hook useT() en nuestros componentes</h2><p>Para utilizar nuestro nuevo flamante hook lo llamamos dentro de alguno de los componentes que desciendan de nuestro <span style="text-decoration: underline;">StateProvider</span>:</p><pre class="language-jsx"><code>const Hello = () =&gt; (\r\n    &lt;div&gt;\r\n       &lt;span&gt;\r\n           { useT("hello_world") }\r\n       &lt;/span&gt;\r\n    &lt;/div&gt;\r\n);</code></pre><p>Hay una cosa importante a tener en cuenta, la posici&oacute;n de los hooks en el DOM virtual debe ser inmutable, as&iacute; que no podr&iacute;amos tener cosas como:&nbsp;</p><pre class="language-javascript"><code>{ isAppLoaded() ? &lt;LoadingPlaceholder /&gt; : useT("hello_world") }</code></pre><p>Es una limitaci&oacute;n importante ( S&iacute; programas sin cabeza ), pero es muy f&aacute;cil de corregir y darle la vuelta para poder hacer lo que quieras.</p><h3>El c&oacute;digo fuente</h3><p>Este mismo hook es el que utilizo yo para traducir el contenido est&aacute;tico de este blog, si quieres ver el c&oacute;digo fuente real y extendido, con algunas funcionalidades extra y desacoplado para poder funcionar como hook o sin el puedes consultarlo aqu&iacute;: <a href="https://github.com/jvidalv/react-vvlog">https://github.com/jvidalv/react-vvlog</a></p></p>\n',
    state: 1,
    word_count: 1189,
    slug:
      'hacer-nuestra-aplicacion-multilenguaje-utilizando-la-potencia-de-los-hooks-y-reactcreatecontext',
    updated_at: 1579440069,
    created_at: 1579428310,
  },
  {
    id: 18,
    language_id: 'ca',
    user_id: 1,
    category_id: 1,
    date: '2020-01-16',
    title:
      'Fer la nostra aplicació multillenguatge utilitzant la potència dels hooks i React.createContext',
    resume:
      "Com fer, amb molt poques línies de codi, el nostre traductor per tenir l'aplicació disponible en més d'un idioma sense necessitat de paquets de tercers.",
    content:
      '<p>Avui dia existeixen llibreries estandarditzades que permeten fer aplicacions multiidioma amb facilitat (Com per exemple <a href="https://www.npmjs.com/package/i18n">i18n</a>), per&ograve; si tenim alguna necessitat especial, o simplement volem aprendre com funcionen de manera "b&agrave;sica" per sota la majoria d\'elles, implementar una a JavaScript, i m&eacute;s concretament utilitzant la pot&egrave;ncia dels Hooks de React &eacute;s senzill.<h3>Qu&egrave; no vaig a explicar-te aqu&iacute;</h3><p>&Eacute;s un tutorial intermedi en el que ometre coses b&agrave;siques com: exportaci&oacute; i importaci&oacute; de fitxers i depend&egrave;ncies, implementaci&oacute; en detall de context o hooks, o com funciona o deixa de funcionar React i JavaScript.</p><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>El diccionari</h2><p>El primer &eacute;s el primer, podem fer m&agrave;gia programant, per&ograve; si no &eacute;s que paguem per una API premium que tradueixi els nostres strings de forma din&agrave;mica,<strong> hem de fer nosaltres les traduccions dels textos</strong>.</p><p>Per a aix&ograve; utilitzarem una estructura b&agrave;sica, un objecte, que contindr&agrave; propietats (la nostra key a l\'idioma), que la seva vegada contindran objectes amb les keys a les traduccions, un exemple b&agrave;sic:</p><pre class="language-javascript"><code>const DICTIONARY = \r\n       ca : {\r\n            hello_world : "Hola m&oacute;n"\r\n       },\r\n       es : {\r\n            hello_world : "Hola mundo"\r\n       },\r\n       en : {\r\n            hello_world : "Hello world"\r\n       }\r\n}\r\n</code></pre><p>Gr&agrave;cies a la flexibilitat de JavaScript pots fer-ho de moltes maneres, per exemple, on posem <span style="text-decoration: underline;">hello_world</span> el podr&iacute;em modificar per l\'string <span style="text-decoration: underline;">"Hello world": "Hello world"</span> directament, aix&iacute;, encara no incloent la traducci&oacute; en aquest objecte, quan truqu&eacute;ssim a la funci&oacute; que la recull i la pinta tornar&iacute;em algun valor amb sentit.</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>&Eacute;s un n&uacute;vol? &Eacute;s un avi&oacute;? No! &Eacute;s el context!</h2><p>Una informaci&oacute; tan global, i indispensable en totes les pantalles de la nostra aplicaci&oacute; amb React com l\'idioma, per l&ograve;gica, ha d\'estar emmagatzemat, o al menys continguda, en un lloc on tots els components tinguin f&agrave;cil acc&eacute;s. &Eacute;s a dir, en un component que els precedeixi a tots, normalment el m&eacute;s alt quant a jerarquia i el primer de la nostra app.</p><p>Si no utilitzem Context o Redux, <strong>ens veurem obligats a passar la llengua per tooooots els components descendents</strong>, i no nom&eacute;s l\'idioma, tamb&eacute; haurem de passar la refer&egrave;ncia a la funci&oacute; que l\'altera, a el menys a el component que el modifica.</p><blockquote>\r\n<p>Per a una problem&agrave;tica com aquesta va n&eacute;ixer Redux i posteriorment Context. Aquests b&agrave;sicament actuen com un contenidor global de "informaci&oacute;" (Estat), i tamb&eacute; com un dispensador (Dispatcher); de l\'estat, i de funcions, que poden alterar (Realment mutar) el seu propi estat.</p>\r\n</blockquote><p>En aquest tutorial, farem servir React.createContext i dos, hooks React.useContext i React.useReducer, per crear el nostre prove&iuml;dor:</p><pre class="language-javascript"><code>import React, {createContext, useContext, useReducer} from "react";\r\n\r\n// Inicialitzem les funcionalitats de l\'context \r\nexport const StateContext = createContext();\r\n\r\n// Tornem el context com un component de react\r\nexport const StateProvider = ({reducer, initialState, children}) =&gt; (\r\n    &lt;StateContext.Provider value={useReducer(reducer, initialState)}&gt;\r\n        {children}\r\n    &lt;/StateContext.Provider&gt;\r\n);\r\n\r\n/**\r\n*  useGlobals &eacute;s el que farem servir per accedir  al context (estat, funcions)\r\n*  des de qualsevol component de la nostra aplicaci&oacute; que baixi de StateProvider\r\n*/\r\nexport const useGlobals = () =&gt; useContext(StateContext);</code></pre><p><span style="text-decoration: underline;">StateProvider</span> requereix de tres props; reducer, initialState i <span style="text-decoration: underline;">children</span>. Aquest &uacute;ltim &eacute;s prop per defecte de React que cont&eacute; els components fills.</p><p><span style="text-decoration: underline;">initialState</span>, com b&eacute; diu el seu nom, &eacute;s l\'estat inicial, un objecte que cont&eacute; els valors inicials de l\'estat, en el nostre cas:</p><pre class="language-javascript"><code>export const initialState = {\r\n   language : \'en\'\r\n}</code></pre><p>Aqu&iacute; podem posar l\'idioma que vulguem (dels que anem a usar, i tinguem declarat en el nostre diccionari), jo per defecte, vull que l\'aplicaci&oacute; arrencada en <strong>en</strong> (Angl&egrave;s).</p><p>El <span style="text-decoration: underline;">reducer</span> t&eacute; m&eacute;s molla, per&ograve; no deixa de ser un switch, de tota la vida, glorificat:</p><pre class="language-javascript"><code>export const reducer = (state, action) =&gt; {\r\n    switch (action.type) {\r\n        case "changeLanguage":\r\n            return {\r\n                ...state,\r\n                // action.changeLanguage cont&eacute; el string de l\'idioma a el qual canviarem\r\n                language: action.changeLanguage,\r\n            };\r\n    }\r\n}</code></pre><p>Amb tot aix&ograve; ja tenim el nostre flamant context llest per a la batalla, <strong>nom&eacute;s ens falta utilitzar-lo en el flux de l\'aplicaci&oacute;</strong>, en el meu cas, l\'utilitzo com el primer component de DOM virtual:</p><pre class="language-jsx"><code>function App() {\r\n    return (\r\n        &lt;StateProvider initialState={initialState} reducer={reducer}&gt;\r\n            &lt;Index/&gt;\r\n        &lt;/StateProvider&gt;\r\n    );\r\n}\r\n</code></pre><p>Ara tots els components descendents d\'Index, Index incl&ograve;s<strong> tenen acc&eacute;s al nostre idioma, i a la seva funci&oacute; que el modifica</strong>, sense necessitat de passar-s\'ho directament com un prop.</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Modificar i accedir a l\'idioma</h2><p>Tota la funcionalitat que necessitem per poder consultar i alterar l\'idioma de la nostra aplicaci&oacute; ens el porta el hook <strong>useGlobals()</strong>:</p><pre class="language-javascript"><code>const [{language}, dispatch] = useGlobals();</code></pre><p><span style="text-decoration: underline;">Language</span> contindr&agrave; el string de l\'idioma actual, en una primera c&agrave;rrega si tot ha funcionat correctament ser&agrave; "<strong>en</strong>". Per la seva banda el <span style="text-decoration: underline;">dispatch</span> s\'encarrega (Despres d\'unes quantes voltes per funcionalitats internes) d\'arribar a el switch que hem declarat abans, i executar la funci&oacute; que li indiquem:</p><pre class="language-javascript"><code>// lang ha de ser l\'idioma el qual anem a assignar ("ca", "es" o "en")\r\nconst changeLanguage = lang =&gt; {\r\n     dispatch({\r\n            type: "changeLanguage",\r\n            changeLanguage: lang\r\n      });\r\n};\r\n</code></pre><h2><a id="a3" style="padding-top: 50px; margin-top: -50px;"></a>El divertit, el hook que tradueix</h2><p>Per fi, amb totes les eines disponibles, crearem el nostre hook de traducci&oacute;.</p><p>Per est&agrave;ndard de React <strong>tots els hooks han d\'utilitzar camelCase</strong> i <strong>comen&ccedil;ar per use</strong>, aix&iacute; que anem a dir-li <strong>useT()</strong>. Ja que &eacute;s una funci&oacute; que utilitzarem molt, el nom, com m&eacute;s curt i net millor (opini&oacute; personal).</p><pre class="language-javascript"><code>/**\r\n * Translation hook\r\n * @param translation string\r\n * @returns {string|*}\r\n */\r\nfunction useT(translation) {\r\n   const [{language}] = useGlobals();\r\n   // El codi que va aqu&iacute; est&agrave; una mica m&eacute;s a baix\r\n}</code></pre><p>Com podem veure &eacute;s molt simple, el hook accepta un par&agrave;metre, translation, &eacute;s l\'identificador en forma de string de la propietat de l\'objecte diccionari a retornar, en aquest cas seria "hello_world", per tornar "Hola m&oacute;n".</p><p>El core de la funci&oacute;:</p><pre class="language-javascript"><code>let fs = translation;\r\n\r\n    try {\r\n\r\n        if (!DICTIONARY[language]) {\r\n            console.error(`Missing language -&gt; ${language}`);\r\n            return `@@ ${fs} @@`;\r\n        }\r\n\r\n        if (!DICTIONARY[language][translation]) {\r\n            console.error(`Missing translation -&gt; ${translation} for -&gt; ${language}`);\r\n            return `@@ ${fs} @@`;\r\n        }\r\n\r\n        fs = DICTIONARY[language][translation];\r\n\r\n    } catch (error) {\r\n        fs = \'@@ translation_error @@\'\r\n    }\r\n\r\nreturn fs;</code></pre><p>Per comen&ccedil;ar, cal haver importat el nostre objecte DICTIONARY, segon, envoltem totes les operacions en un <strong>try / catch per aix&iacute; tenir la seguretat que SEMPRE retornarem una cadena i no farem explotar l\'aplicaci&oacute; per l\'aire</strong>.</p><ol>\r\n<li>En el primer IF validem que existeixi el llenguatge.</li>\r\n<li>En el segon validem que existeixi la traducci&oacute;.</li>\r\n</ol><p>S&iacute; tot &eacute;s correcte tornem la traducci&oacute; de l\'idioma, si no, tornem una cadena envoltat de @@ i vam llan&ccedil;ar un error per consola perqu&egrave; el desenvolupador / traductor pugui detectar que aqu&iacute; falla alguna cosa.</p><h2><a id="a4" style="padding-top: 50px; margin-top: -50px;"></a>Utilizar el hook useT() en els nostres components</h2><p>Per utilitzar el nostre nou flamant hook en diem dins d\'algun dels components que baixin del nostre <span style="text-decoration: underline;">StateProvider</span>:</p><pre class="language-jsx"><code>const Hello = () =&gt; (\r\n    &lt;div&gt;\r\n       &lt;span&gt;\r\n           { useT("hello_world") }\r\n       &lt;/span&gt;\r\n    &lt;/div&gt;\r\n);</code></pre><p>Hi ha una cosa important a tenir en compte, la posici&oacute; dels hooks al DOM virtual ha de ser immutable, aix&iacute; que no podr&iacute;em tenir coses com:</p><pre class="language-javascript"><code>{ isAppLoaded() ? &lt;LoadingPlaceholder /&gt; : useT("hello_world") }</code></pre><p>&Eacute;s una limitaci&oacute; important (S&iacute; programes sense cap), per&ograve; &eacute;s molt f&agrave;cil de corregir i donar-li la volta per poder fer el que vulguis.</p><h3>El codi font</h3><p>Aquest mateix hook &eacute;s el que utilitzo jo per traduir el contingut est&agrave;tic d\'aquest bloc, si vols veure el codi font real, amb algunes funcionalitats extra i desacoplat per poder funcionar com hook o sense, pots consultar-ho aqu&iacute;: <a href="https://github.com/jvidalv/react-vvlog">https://github.com/jvidalv/react-vvlog</a></p></p>\n',
    state: 1,
    word_count: 1173,
    slug:
      'fer-la-nostra-aplicacio-multillenguatge-utilitzant-la-potencia-dels-hooks-i-reactcreatecontext',
    updated_at: 1579442602,
    created_at: 1579437065,
  },
  {
    id: 19,
    language_id: 'es',
    user_id: 1,
    category_id: 1,
    date: '2020-01-14',
    title: 'Utilizar Prismjs para dar estilos a los snippets de código en una aplicación con React',
    resume:
      'Transforma fácilmente trozos de código en HTML plano a estilizados divs llenos de color como si de tu IDE favorito se tratara.',
    content:
      '<p>Utilizar la extensi&oacute;n de Prismjs en una aplicaci&oacute;n de React requiere de m&aacute;s cosas que&nbsp; importar la librer&iacute;a. En mi caso, al ser los snippets din&aacute;micos provenientes de una API, me dio unos cuantos quebraderos de cabeza.<blockquote>\r\n<p><strong>Prism </strong>es un <em>highlighter</em> de sintaxis ligero y extensible. Se utiliza en miles de sitios web, incluyendo algunos de los que visitas diariamente.</p>\r\n</blockquote><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>Puedes probar a utilizar react-prism</h2><p>Existe una <a href="https://www.npmjs.com/package/react-prism">adaptaci&oacute;n</a> de React que transforma los snippets en componentes, pero tiene dos problemas, una, esta semi abandonada y no es nada completa, y dos, en mi caso, que recupero los snippets de una API, tengo que trabajar directamente con HTML, y con la peligrosisima propiedad:&nbsp;</p><pre class="language-javascript"><code>dangerouslySetInnerHTML</code></pre><p>Si react-prism no te convence y quieres continuar con el est&aacute;ndart de prism para javascript, contin&uacute;a leyendo.</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>Lo b&aacute;sico</h2><p>Lo primero es instalar el paquete:</p><pre class="language-bash"><code>npm install prismjs</code></pre><p>Con esto realizado, podemos importarlo como <strong>Prism</strong> en los ficheros donde lo usamos:</p><pre class="language-javascript"><code>import Prism from "prismjs";\r\nimport \'prismjs/themes/prism-okaidia.css\'\r\nimport \'prismjs/components/prism-jsx.min\'</code></pre><p>Estas l&iacute;neas despu&eacute;s de la importaci&oacute;n principal son b&aacute;sicas. La primera &eacute;s el tema que queremos usar, podemos consultar el aspecto que tienen en su p&aacute;gina principal ( El link que adjunto en las fuentes del art&iacute;culo ), hay muchos, a m&iacute; particularmente el que m&aacute;s me gusta es el okaidia.</p><p>En la segunda l&iacute;nea importo un "componente". Los componentes de Prism le permiten desacoplar en peque&ntilde;os elementos el tipo de lenguaje al cual hacen referencia (En este caso JSX). Con el c&oacute;digo troceado a base de spans es cuando con el CSS le puede dar estilos a cada par&eacute;ntesis, coma, funci&oacute;n, variable...</p><p><strong>No nos tiene que dar miedo summergirnos en el profundo y horripilante mundo de node_modules</strong> y todas sus carpetas, pues es de la &uacute;nica forma en la que sabremos exactamente de que estilos disponemos, que componentes, e incluso que funcionalidades extra dentro de la carpeta plugins existen en prismjs.&nbsp;</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Resaltar los snippets de c&oacute;digo</h2><p>Con todo esto ya podemos empezar a trabajar en React. Voy a omitir la parte de donde hacemos el fetch del snippet y recuperamos la data, vamos directos a la injecci&oacute;n de HTML en vena de nuestro componente:</p><pre class="language-jsx"><code> &lt;Content\r\n        dangerouslySetInnerHTML={{\r\n              __html: snippet\r\n        }}\r\n/&gt;</code></pre><p>Ojo, <strong>hay que estar muy seguros de lo que trae la variable snippet cuando hacemos un </strong><em><strong>dangerouslySetInnerHTML</strong>, </em>sino nos exponemos a que nos hagan todo tipo de pillerias.</p><p>Ahora solo nos falta invocar el metodo de Prismjs que activa el highlight del codigo, podemos hacerlo con hooks, y el fant&aacute;stico React.useEffect;</p><pre class="language-javascript"><code>React.useEffect(() =&gt; {\r\n        if (snippet) {\r\n            setTimeout(function () {\r\n                Prism.highlightAll()\r\n            }, 150);\r\n        }\r\n}, [snippet]);</code></pre><p>B&aacute;sicamente lo que hacemos con el useEffect es, si existe un snippet, al cabo de 0.15 segundos ejecutar la funci&oacute;n que resaltara nuestro c&oacute;digo.</p><p>&iquest;Porque as&iacute;? Primero, al ser nuestro contenido din&aacute;mico necesitamos tener un listener a los cambios del mismo, pues, en la primera carga a&uacute;n no estar&aacute; disponible debido a que tiene que ir a buscarlo al exterior, para ello utilizamos el useEffect con una dependencia que es snippet, de tal forma que se volver&aacute; a ejecutar cuando detecte que este ha cambiado (En nuestro caso ha pasado de estar vac&iacute;o | null a tener valor ).</p><p>Segundo, el setTimeout es necesario pues al ser tan inmediato a&uacute;n no estar&aacute; el dom actualizado cuando se ejecute el useEffect, provocando que no encuentre nuestro c&oacute;digo a resaltar a&uacute;n, por ello, le metemos un tiempo imperceptible pero suficiente para que nuestro dom se pueda cargar correctamente.&nbsp;</p><p>Con todo esto, si el HTML que mandamos tiene el formato correcto:</p><pre class="language-markup"><code>&lt;pre class="language-jsx"&gt;&lt;code&gt;&amp;lt;div dangerouslySetInnerHTML={} /&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>&iexcl;Ya tendr&iacute;amos nuestro snippets bonitos y funcionales!</p></p>\n',
    state: 1,
    word_count: 599,
    slug: 'utilizar-prismjs-para-dar-estilos-a-los-snippets-de-codigo-en-una-aplicacion-con-react',
    updated_at: 1579644338,
    created_at: 1579634490,
  },
  {
    id: 20,
    language_id: 'en',
    user_id: 1,
    category_id: 1,
    date: '2020-01-14',
    title: 'Using Prismjs to stylize our code snippets in a React app',
    resume:
      'Easily transform plain HTML code into stylish, colorful divs like it is your favorite IDE.',
    content:
      '<p>Using the Prismjs extension in a React application requires more than importing the library. In my case, as the snippets are dynamic coming from an API, it gave me a few headaches.<blockquote>\r\n<p><strong>Prismjs</strong> is a lightweight and extensible syntax highlighter. It is used on thousands of websites, including some you visit daily.</p>\r\n</blockquote><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>You can try using react-prism</h2><p>There is an <a href="https://www.npmjs.com/package/react-prism">adaptation</a> of React that transforms lets you write the snippets as React components, but it has two problems, one, it is semi-abandoned and not complete at all, and two, in my case, that I recover the snippets from an API, I have to work directly with HTML.</p><pre class="language-javascript"><code>dangerouslySetInnerHTML</code></pre><p>If react-prism doesn\'t convince you and you want to continue with the standard prism for javascript, keep reading.</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>The basics</h2><p>The first thing is to install the package:</p><pre class="language-bash"><code>npm install prismjs</code></pre><p>With this done, we can import it as <strong>Prism</strong> in the files where we use it:</p><pre class="language-javascript"><code>import Prism from "prismjs";\r\nimport \'prismjs/themes/prism-okaidia.css\'\r\nimport \'prismjs/components/prism-jsx.min\'</code></pre><p>These lines after the main import are basic. The first one is the theme we want to use, we can check the way they look in their main page ( The link that I attach in the article\'s sources ), there are many, the one that I like more is the okaidia.</p><p>In the second line I import a "component". Prism components allow you to decouple into small elements (spans) the type of language they refer to (in this case JSX). With the spans based code is when with the CSS you can give styles to each parenthesis, comma, function, variable...</p><p><strong>We don\'t have to be afraid of diving deep in the horrifying world of node_modules</strong> and all its folders, because that\'s the only way we\'ll know exactly which styles we have, which components, and even which extra features inside the plugins folder exist in prismjs.&nbsp;</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Highlight code snippets</h2><p>With all this we can start working on React. I\'m going to omit the part where we fetch the snippet and retrieve the data, we go straight to the HTML vein injection of our component:</p><pre class="language-jsx"><code> &lt;Content\r\n        dangerouslySetInnerHTML={{\r\n              __html: snippet\r\n        }}\r\n/&gt;</code></pre><p>Be careful, <strong>you have to be very sure of what the snippet variable brings when you make a dangerouslySetInnerHTML</strong>, otherwise you expose yourself to all sorts of attacks.</p><p>Now we only need to invoke the Prismjs method that activates the highlight of the code, we can do it with hooks, and the awesome React.useEffect;</p><pre class="language-javascript"><code>React.useEffect(() =&gt; {\r\n        if (snippet) {\r\n            setTimeout(function () {\r\n                Prism.highlightAll()\r\n            }, 150);\r\n        }\r\n}, [snippet]);</code></pre><p>Basically what we do with useEffect is, if a snippet exists, after 0.15 seconds execute the function that will highlight our code.</p><p>Why like this? First, because our content is dynamic we need to have a listener to the changes of it,&nbsp; in the first load it will not be available yet because it has to go to look for it outside, so we use the useEffect with a dependency that is snippet, <strong>so that it will be executed again when it detects that this has changed</strong> (In our case it has passed from being empty | null to having value ).</p><p>Second, the setTimeout is necessary because it is so immediate that the DOM will not be updated when the useEffect is executed, causing that it doesn\'t find our code to highlight yet, for that reason, we put him an imperceptible but sufficient time so that our DOM can be loaded correctly.&nbsp;</p><p>With all this, if the HTML we send is in the right format:</p><pre class="language-markup"><code>&lt;pre class="language-jsx"&gt;&lt;code&gt;&amp;lt;div dangerouslySetInnerHTML={} /&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>We\'d have our nice, functional snippets by now!</p></p>\n',
    state: 1,
    word_count: 601,
    slug: 'using-prismjs-to-stylize-our-code-snippets-in-a-react-app',
    updated_at: 1579644350,
    created_at: 1579642870,
  },
  {
    id: 21,
    language_id: 'ca',
    user_id: 1,
    category_id: 1,
    date: '2020-01-14',
    title: 'Utilitzar Prism per donar estils als snippets de codi en una aplicació amb React',
    resume:
      'Transforma fàcilment trossos de codi en HTML pla a estilitzats divs plens de color com si del teu IDE favorit es tractés.',
    content:
      '<p>Utilitzar l\'extensi&oacute; de Prismjs en una aplicaci&oacute; de React requereix de m&eacute;s coses que importar la llibreria. En el meu cas, a l\'&eacute;sser els snippets din&agrave;mics provinents d\'una API, em va donar uns quants mals de cap.<blockquote>\r\n<p><strong>Prism</strong> &eacute;s un Highlighter de sintaxi lleuger i extensible. S\'utilitza en milers de llocs web, incloent alguns dels que visites di&agrave;riament</p>\r\n</blockquote><h2><a id="a0" style="padding-top: 50px; margin-top: -50px;"></a>Pots provar a utilitzar react-prism</h2><p>Hi ha una <a href="https://www.npmjs.com/package/react-prism">adaptaci&oacute;</a> de React que transforma els snippets en components, per&ograve; t&eacute; dos problemes, un, aquesta semi abandonada i no &eacute;s gens completa, i dos, en el meu cas, que recupero els snippets d\'una API, he de treballar directament amb HTML, i amb la perillos&iacute;ssima propietat:</p><pre class="language-javascript"><code>dangerouslySetInnerHTML</code></pre><p>Si react-prism no et conven&ccedil; i vols continuar amb el estandart de prism per javascript, continua llegint.</p><h2><a id="a1" style="padding-top: 50px; margin-top: -50px;"></a>El b&agrave;sic</h2><p>El primer &eacute;s instal&middot;lar el paquet:</p><pre class="language-bash"><code>npm install prismjs</code></pre><p>Amb aix&ograve; realitzat, podem importar-lo com <strong>Prism</strong> en els fitxers on el fem servir:</p><pre class="language-javascript"><code>import Prism from "prismjs";\r\nimport \'prismjs/themes/prism-okaidia.css\'\r\nimport \'prismjs/components/prism-jsx.min\'</code></pre><p>Aquestes l&iacute;nies despr&eacute;s de la importaci&oacute; principal s&oacute;n b&agrave;siques. La primera &eacute;s el tema que volem fer servir, podem consultar l\'aspecte que tenen a la seva p&agrave;gina principal (El link que adjunt a les fonts de l\'article), hi ha molts, a mi particularment el que m&eacute;s m\'agrada &eacute;s el okaidia.</p><p>A la segona l&iacute;nia importo un "component". Els components de Prism li permeten desacoplar en petits elements el tipus de llenguatge a el qual fan refer&egrave;ncia (En aquest cas JSX). Amb el codi trossejat a for&ccedil;a de spans &eacute;s quan amb el CSS li pot donar estils a cada par&egrave;ntesi, coma, funci&oacute;, variable ...</p><p><strong>No ens ha de fer por summergirnos en el profund i horripilant m&oacute;n de node_modules</strong> i totes les seves carpetes, ja que &eacute;s de l\'&uacute;nica manera en qu&egrave; sabrem exactament que estils disposem, que components, i fins i tot que funcionalitats extra dins de la carpeta plugins existeixen en prismjs.</p><h2><a id="a2" style="padding-top: 50px; margin-top: -50px;"></a>Ressaltar els snippets de codi</h2><p>Amb tot aix&ograve; ja podem comen&ccedil;ar a treballar en React. Vaig a ometre la part d\'on fem el fetch de l\'snippet i recuperem la data, anem directes a la injecci&oacute; d\'HTML en vena del nostre component:</p><pre class="language-jsx"><code> &lt;Content\r\n        dangerouslySetInnerHTML={{\r\n              __html: snippet\r\n        }}\r\n/&gt;</code></pre><p>Cal estar molt segurs <strong>del que porta la variable snippet quan fem un dangerouslySetInnerHTML</strong>, sin&oacute; ens exposem a que ens facin tota mena de atacs.</p><p>Ara nom&eacute;s ens falta invocar el m&egrave;tode de Prismjs que activa el highlight de el codi, podem fer-ho amb hooks, i el fant&agrave;stic React.useEffect:</p><pre class="language-javascript"><code>React.useEffect(() =&gt; {\r\n        if (snippet) {\r\n            setTimeout(function () {\r\n                Prism.highlightAll()\r\n            }, 150);\r\n        }\r\n}, [snippet]);</code></pre><p>B&agrave;sicament el que fem amb el useEffect &eacute;s, si existeix un snippet, a el cap de 0.15 segons executar la funci&oacute; que resaltara el nostre codi.</p><p>&iquest;Perqu&egrave; aix&iacute;? Primer, al ser el nostre contingut din&agrave;mic necessitem tenir un listener als canvis, doncs, en la primera c&agrave;rrega encara no estar&agrave; disponible pel fet que ha d\'anar a buscar-lo a l\'exterior, per aix&ograve; <strong>utilitzem el useEffect amb una depend&egrave;ncia que &eacute;s snippet, de tal manera que es tornar&agrave; a executar quan detecti que aquest ha canviat</strong> (En el nostre cas ha passat d\'estar buit | null a tenir valor).</p><p>Segon, el setTimeout. Al ser immediat encara no s\'haura actualitzat el DOM quan s\'executi el useEffect, provocant que no trobi el nostre codi a ressaltar, per aix&ograve;, li fiquem un temps imperceptible per&ograve; suficient perqu&egrave; el nostre DOM es pugui carregar.</p><p>Amb tot aix&ograve;, si l\'HTML que enviem t&eacute; el format correcte:</p><pre class="language-markup"><code>&lt;pre class="language-jsx"&gt;&lt;code&gt;&amp;lt;div dangerouslySetInnerHTML={} /&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>Ja tindr&iacute;em el nostre snippets bonics i funcionals!</p></p>\n',
    state: 1,
    word_count: 591,
    slug: 'utilitzar-prism-per-donar-estils-als-snippets-de-codi-en-una-aplicacio-amb-react',
    updated_at: 1579644373,
    created_at: 1579643605,
  },
]

export default Articles
